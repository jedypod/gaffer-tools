import Gaffer
import GafferImage
import GafferOSL
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 2, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 4, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["LogConvert"] = Gaffer.Box( "LogConvert" )
parent.addChild( __children["LogConvert"] )
__children["LogConvert"].addChild( GafferOSL.OSLImage( "OSLImage" ) )
__children["LogConvert"]["OSLImage"]["channels"].addChild( Gaffer.NameValuePlug( "", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 1, 1, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "channel", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["LogConvert"]["OSLImage"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LogConvert"].addChild( GafferImage.ImagePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LogConvert"].addChild( GafferOSL.OSLShader( "InLayer1" ) )
__children["LogConvert"]["InLayer1"].loadShader( "ImageProcessing/InLayer" )
__children["LogConvert"]["InLayer1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LogConvert"].addChild( GafferOSL.OSLCode( "LogConvert" ) )
__children["LogConvert"]["LogConvert"]["parameters"].addChild( Gaffer.Color3fPlug( "in", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LogConvert"]["LogConvert"]["parameters"].addChild( Gaffer.IntPlug( "curve", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LogConvert"]["LogConvert"]["parameters"].addChild( Gaffer.IntPlug( "invert", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LogConvert"]["LogConvert"]["out"].addChild( Gaffer.Color3fPlug( "out", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LogConvert"]["LogConvert"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LogConvert"].addChild( Gaffer.BoxIn( "BoxIn" ) )
__children["LogConvert"]["BoxIn"].setup( GafferImage.ImagePlug( "out", ) )
__children["LogConvert"]["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LogConvert"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LogConvert"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["LogConvert"]["BoxOut"].setup( GafferImage.ImagePlug( "in", ) )
__children["LogConvert"]["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LogConvert"].addChild( GafferImage.ImagePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LogConvert"].addChild( Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LogConvert"].addChild( Gaffer.BoxIn( "BoxIn1" ) )
__children["LogConvert"]["BoxIn1"].setup( Gaffer.IntPlug( "out", defaultValue = 0, ) )
__children["LogConvert"]["BoxIn1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LogConvert"].addChild( Gaffer.IntPlug( "curve", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LogConvert"].addChild( Gaffer.BoxIn( "BoxIn2" ) )
__children["LogConvert"]["BoxIn2"].setup( Gaffer.IntPlug( "out", defaultValue = 0, ) )
__children["LogConvert"]["BoxIn2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["LogConvert"].addChild( Gaffer.IntPlug( "invert", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
Gaffer.Metadata.registerValue( __children["LogConvert"], 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( __children["LogConvert"], 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( __children["LogConvert"], 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( __children["LogConvert"], 'noduleLayout:customGadget:addButtonRight:visible', False )
Gaffer.Metadata.registerValue( __children["LogConvert"], 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( __children["LogConvert"], 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )
Gaffer.Metadata.registerValue( __children["LogConvert"], 'description', 'Convert from Linear to Log or the inverse. Supports many common camera and working space log encodings.' )
Gaffer.Metadata.registerValue( __children["LogConvert"], 'documentation:url', '' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["OSLImage"]["user"], 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( __children["LogConvert"]["OSLImage"]["user"], 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )
__children["LogConvert"]["OSLImage"]["in"].setInput( __children["LogConvert"]["BoxIn"]["out"] )
__children["LogConvert"]["OSLImage"]["channels"]["channel"]["value"].setInput( __children["LogConvert"]["LogConvert"]["out"]["out"] )
__children["LogConvert"]["OSLImage"]["__uiPosition"].setValue( imath.V2f( 1.66401052, 9.34525871 ) )
Gaffer.Metadata.registerValue( __children["LogConvert"]["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["in"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["in"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["in"], 'layout:index', 2 )
__children["LogConvert"]["InLayer1"]["__uiPosition"].setValue( imath.V2f( -28.6479816, 18.3452606 ) )
__children["LogConvert"]["LogConvert"]["parameters"]["in"].setInput( __children["LogConvert"]["InLayer1"]["out"]["layerColor"] )
__children["LogConvert"]["LogConvert"]["parameters"]["curve"].setInput( __children["LogConvert"]["BoxIn1"]["out"] )
__children["LogConvert"]["LogConvert"]["parameters"]["invert"].setInput( __children["LogConvert"]["BoxIn2"]["out"] )
__children["LogConvert"]["LogConvert"]["code"].setValue( 'float logConvert(float x) {\n/* ACEScc Log\n\t\tS-2014-003 : ACEScc - A Quasi-Logarithmic Encoding of ACES Data for use within Color Grading Systems\n\t\thttp://j.mp/S-2014-003 \n*/\nif (curve == 0) {\n\tfloat A = 9.72;\n\tfloat B = 17.52;\n\tif (invert) return x <= (A - 15)/B ? (pow(2, x*B - A) - pow(2, -16))*2 : x < (log2(65504) + A)/B ? pow(2, x*B - A) : x;\n\telse return x <= 0 ? (log2(-16) + A)/B : x < pow(2, -15) ? (log2(pow(2, -16) + x/2) + A)/B : (log2(x) + A)/B;\n}\n/*  ACEScct Log\n\t\tS-2016-001 : ACEScct - A Quasi-Logarithmic Encoding of ACES Data for use within Color Grading Systems\n\t\thttp://j.mp/S-2016-001_\n*/\nelse if (curve == 1) {\n\tfloat cut1 = 0.0078125;\n\tfloat cut2 = 0.155251141552511;\n\tfloat A = 10.5402377416545;\n\tfloat B = 0.0729055341958355;\n\tfloat C = 9.72;\n\tfloat D = 17.52;\n\t\n\tif (invert) return x <= cut2 ? (x - B)/A : exp2(x*D - C);\n\telse return x <= cut1 ? A*x + B : (log2(x) + C)/D;\n}\n/*\tArri Alexa LogC3\n\t\tFormerly known as Alexa V3LogC EI800\n\t\thttps://www.arri.com/resource/blob/31918/66f56e6abb6e5b6553929edf9aa7483e/2017-03-alexa-logc-curve-in-vfx-data.pdf \n*/\nelse if (curve == 2) {\n\tfloat cut = 0.010591;\n\tfloat a = 5.555556;\n\tfloat b = 0.052272;\n\tfloat c = 0.247190;\n\tfloat d = 0.385537;\n\tfloat e = 5.367655;\n\tfloat f = 0.092809;\n\t\n\tif (invert) return x < e*cut + f ? (x - f)/e : (pow(10, (x - d)/c) - b)/a;\n\telse return x < cut ? e*x + f : c*log10(a*x + b) + d;\n}\n/* Arri Alexa LogC4\n    https://www.arri.com/resource/blob/278790/bea879ac0d041a925bed27a096ab3ec2/2022-05-arri-logc4-specification-data.pdf\n*/\nelse if (curve == 3) {\n\tfloat a = (exp2(18.0) - 16.0)/117.45;\n\tfloat b = (1023.0 - 95.0)/1023.0;\n\tfloat c = 95.0/1023.0;\n\tfloat s = (7*log(2)*exp2(7 - 14*c/b))/(a*b);\n\tfloat t = (exp2(14*(-c/b) + 6) - 64)/a;\n\t\n\tif (invert) return x < t ? x*s + t : (exp2(14*(x - c)/b + 6) - 64)/a;\n\telse return x < t ? (x - t)/s : (log2(a*x + 64) - 6)/14*b + c;\n}\n/* Blackmagic Film Generation 5\n    Specified in the Blackmagic Generation 5 Color Science whitepaper included in the Blackmagic Raw SDK available here\n    https://www.blackmagicdesign.com/support/download/1bad3dc74c2c4a908ce5c9ce8b9f74f8/Linux\n    At this path in the installer:\n    /usr/lib64/blackmagic/BlackmagicRAWSDK/Documents/Blackmagic Generation 5 Color Science Technical Reference.pdf\n*/\nelse if (curve == 4) { \n\tfloat A = 0.08692876065491224;\n\tfloat B = 0.005494072432257808;\n\tfloat C = 0.5300133392291939;\n\tfloat D = 8.283605932402494;\n\tfloat E = 0.09246575342465753;\n\tfloat LIN_CUT = 0.005;\n\tfloat LOG_CUT = D * LIN_CUT + E;\n\t\n\tif (invert) return x < LOG_CUT ? (x - E)/D : exp((x - C)/A) - B;\n\telse return x < LIN_CUT ? D*x + E : A*log(x + B) + C;\n}\nelse if (curve == 5) { \n\t/* Canon CLog2\n\t    CLog2 is intended for grading workflows, whereas CLog3 is intended for a more "direct to display" workflow.\n\t    \n\t    Canon log transfer functions are all described in this whitepaper:\n\t    https://downloads.canon.com/nw/learn/white-papers/cinema-eos/white-paper-canon-log-gamma-curves.pdf\n\t\n\t    The log transfer functions described above match the 1D LUTs available in the "Canon lookup table Version 201911" \n\t    download available here\n\t    https://www.usa.canon.com/internet/portal/us/home/support/details/cameras/cinema-eos/cinema-eos-c500-mark-ii?tab=drivers_downloads\n\t\n\t    However in the CTL ACES IDT provided in the "Input Transform Version 202007 for EOS C500 Mark II" file \n\t    at the above url, they add the /=0.9 on the scene-linear values. This function matches the IDT.\n\t*/\n\tfloat c0 = 0.092864125;\n\tfloat c1 = 0.24136077;\n\tfloat c2 = 87.099375;\n\t\n\tif (invert) {\n\t  x = x < c0 ? -(pow(10, (c0 - x)/c1) - 1.0)/c2 : (pow(10, (x - c0)/c1) - 1.0)/c2;\n\t  return x*0.9;\n\t} else {\n\t  x /= 0.9;\n\t  return x < 0.0 ? -c1*log10(1.0 - c2*x) + c0 : c1*log10(c2*x + 1.0) + c0;\n\t}\n}\nelse if (curve == 6) { \n\t/* Canon CLog3\n\t    Warning: CLog3 is intended for a more "direct to display" workflow\n\t*/\n\tfloat sp0 = 0.014;\n\tfloat sp1 = 0.09746547;\n\tfloat sp2 = 0.15277891;\n\tfloat c0 = 0.36726845;\n\tfloat c1 = 14.98325;\n\tfloat c2 = 0.12783901;\n\tfloat c3 = 1.9754798;\n\tfloat c4 = 0.12512219;\n\tfloat c5 = 0.12240537;\n\t\n\tif (invert) {\n\t  x = x < sp1 ? -(pow(10, (c2 - x)/c0) - 1.0)/c1 : x <= sp2 ? (x - c4)/c3 : (pow(10, (x - c5)/c0) - 1.0)/c1;\n\t  return x*0.9;\n\t} else {\n\t  x /= 0.9;\n\t  return x < -sp0 ? -c0*log10(1.0 - c1*x) + c2 : x <= sp0 ? c3*x + c4 : c0*log10(c1*x + 1.0) + c5;\n\t}\n}\nelse if (curve == 7) { \n\t/* DJI D-Log\n\t    https://dl.djicdn.com/downloads/zenmuse+x7/20171010/D-Log_D-Gamut_Whitepaper.pdf\n\t*/\n\t\n\tif (invert) return x <= 0.14 ? (x - 0.0929)/6.025 : (pow(10, (3.89616*x - 2.27752)) - 0.0108)/0.9892;\n\telse return x <= 0.0078 ? 6.025*x + 0.0929 : (log10(x*0.9892 + 0.0108))*0.256663 + 0.584555;\n}\nelse if (curve == 8) { \n\t/* Fujifilm F-Log\n\t\t\thttps://dl.fujifilm-x.com/support/lut/F-Log_DataSheet_E_Ver.1.0.pdf\n\t*/\n\tfloat a = 0.555556;\n\tfloat b = 0.009468;\n\tfloat c = 0.344676;\n\tfloat d = 0.790453;\n\tfloat e = 8.735631;\n\tfloat f = 0.092864;\n\tfloat cut1 = 0.00089;\n\tfloat cut2 = 0.1005377752;\n\n\tif (invert) return x < cut2 ? (x-f)/e : (pow(10, ((x - d)/c))/a - b/a);\n\telse return x < cut1 ? e*x+f : c*log10(a*x + b) + d;\n}\nelse if (curve == 9) {\n\t/* GoPro Protune Flat log curve\n\t    Unable to find whitepaper on this but it is described in this file from the original HPD opencolorio ACES config:\n\t    https://github.com/hpd/OpenColorIO-Configs/blob/master/aces_1.0.3/python/aces_ocio/colorspaces/gopro.py\n\t*/\n\tif (invert) return (pow(113.0, x) - 1.0)/112.0;\n\telse return log(x*112.0 + 1.0)/log(113.0);\n}\nelse if (curve == 10) {\n\t/* Leica L-Log\n\t    https://leica-camera.com/sites/default/files/pm-65977-210914__L-Log_Reference_Manual_EN.pdf\n\t*/\n\tfloat a = 8.0;\n\tfloat b = 0.09;\n\tfloat c = 0.27;\n\tfloat d = 1.3;\n\tfloat e = 0.0115;\n\tfloat f = 0.6;\n\tfloat c0 = 0.006;\n\tfloat c1 = 0.138;\n\t\n\tif (invert) return x < c1 ? (x - b)/a : (pow(10, (x - f)/c) - e)/d;\n\telse return x < c0 ? a*x + b : c*log10(d*x + e) + f;\n}\nelse if (curve == 11) {\n\t/* Nikon N-Log\n\t    http://download.nikonimglib.com/archive3/hDCmK00m9JDI03RPruD74xpoU905/N-Log_Specification_(En)01.pdf\n\t*/\n\tfloat a = 619.0/1023.0;\n\tfloat b = 150.0/1023.0;\n\tfloat c = 650.0/1023.0;\n\tfloat d = 0.0075;\n\tfloat c0 = 452.0/1023.0;\n\tfloat c1 = 0.328;\n\t\n\tif (invert) return x > c0 ? exp((x - a)/b) : pow(x/c, 3.0) - d;\n\telse return x > c1 ? b*log(x) + a : c*pow(x + d, 1.0/3.0);\n}\nelse if (curve == 12) {\n\t/* Panasonic V-Log\n\t    https://pro-av.panasonic.net/en/cinema_camera_varicam_eva/support/pdf/VARICAM_V-Log_V-Gamut.pdf\n\t*/\n\tfloat cut1 = 0.01;\n\tfloat cut2 = 0.181;\n\tfloat b = 0.00873;\n\tfloat c = 0.241514;\n\tfloat d = 0.598206;\n\t\n\tif (invert) return x < cut2 ? (x - 0.125)/5.6 : pow(10, (x - d)/c) - b;\n\telse return x < cut1 ? 5.6*x + 0.125 : c*log10(x + b) + d;\n}\nelse if (curve == 13) {\n\t/* Red Log3G10\n\t    https://docs.red.com/955-0187/PDF/915-0187%20Rev-C%20%20%20RED%20OPS,%20White%20Paper%20on%20REDWideGamutRGB%20and%20Log3G10.pdf\n\t*/\n\tfloat a = 0.224282;\n\tfloat b = 155.975327;\n\tfloat c = 0.01;\n\tfloat g = 15.1927;\n\t\n\tif (invert) return x < 0.0 ? (x/g) - c : (pow(10, x/a) - 1.0)/b - c;\n\telse return x < -c ? (x + c)*g : a*log10((x + c)*b + 1.0);\n}\nelse if (curve == 14) {\n\t/* Sony S-Log2\n\t    from the pdf originally retrieved from :\n\t    https://pro.sony/ue_US/?sonyref=pro.sony.com/bbsccms/assets/files/micro/dmpc/training/S-Log2_Technical_PaperV1_0.pdf\n\t    Link is down, here is a mirror:\n\t    https://mega.nz/file/e6hDxC5b#YaRzePfGFFPkx_hRtmqw2gTT0NIPuzlJycwCP38H720\n\t*/\n\tfloat c0 = 0.432699;\n\tfloat c1 = 155.0;\n\tfloat c2 = 219.0;\n\tfloat c3 = 0.037584;\n\tfloat c4 = 0.616596;\n\tfloat c5 = 0.03;\n\tfloat c6 = 3.53881278538813;\n\tfloat c7 = 0.030001222851889303;\n\t\n\tif (invert) {\n\t  x = (x - 64.0/1023.0)/(876.0/1023.0);\n\t  x = x < c7 ? (x - c7)/c6 : c2*(pow(10, (x - c4 - c5)/c0) - c3)/c1;\n\t  return x*0.9;\n\t} else {\n\t  x /= 0.9;\n\t  x = x < 0.0 ? x*c6 + c7 : (c0*log10(c1*x/c2 + c3) + c4) + c5;\n\t  return x*(876.0/1023.0) + 64.0/1023.0;\n\t}\n}\nelse if (curve == 15) {\n\t/* Sony S-Log3\n\t    https://pro.sony/s3/cms-static-content/uploadfile/06/1237494271406.pdf\n\t*/\n\tfloat a = 0.01125;\n\tfloat b = 420.0;\n\tfloat c = 261.5;\n\tfloat d = 171.2102946929;\n\tfloat e = 95.0;\n\tfloat f = 0.18;\n\tfloat o = 0.01;\n\t\n\tif (invert) return x < d/1023.0 ? (x*1023.0 - e)*a/(d-e) : (pow(10, ((x*1023.0 - b)/c))*(f + o) - o);\n\telse return x < a ? (x*(d - e)/a + e)/1023.0 : (b + log10((x + o)/(f + o))*c)/1023.0;\n}\nelse if (curve == 16) {\n\t/* DaVinci Intermediate Log\n\t    https://documents.blackmagicdesign.com/InformationNotes/DaVinci_Resolve_17_Wide_Gamut_Intermediate.pdf\n\t*/\n\t\n\tfloat A = 0.0075;\n\tfloat B = 7.0;\n\tfloat C = 0.07329248;\n\tfloat M = 10.44426855;\n\tfloat LIN_CUT = 0.00262409;\n\tfloat LOG_CUT = 0.02740668;\n\t\n\tif (invert) return x <= LOG_CUT ? x/M : exp2(x/C - B) - A;\n\telse return x <= LIN_CUT ? x*M : (log2(x + A) + B)*C;\n}\nelse if (curve == 17) {\n\t/* Filmlight T-Log\n\t    Specified in the flspace file included with the Baselight software\n\t    /etc/colourspaces/FilmLight_TLog_EGamut.flspace\n\t*/\n\t\n\tfloat o = 0.075;\n\tfloat A = 0.5520126568606655;\n\tfloat B = 0.09232902596577353;\n\tfloat C = 0.0057048244042473785;\n\tfloat G = 16.184376489665897;\n\t\n\tif (invert) return x < o ? (x-o)/G : exp((x - A)/B) - C;\n\telse return x < 0.0 ? G*x + o : log(x + C)*B + A;\n}\nelse if (curve == 18) {\n\t/* Kodak Cineon Log\n\t    https://github.com/imageworks/OpenColorIO-Configs/blob/master/nuke-default/make.py\n\t*/\n\tfloat a = 685.0;\n\tfloat b = 300.0;\n\tfloat c = 95.0;\n\tfloat off = pow(10, (c - a)/b);\n\t\n\tif (invert) return (pow(10, ((1023.0*x - a)/b)) - off)/(1.0 - off);\n\telse return (a + b*log10(x*(1.0 - off) + off))/1023.0;\n}\n}\n\nout.r = logConvert(in.r);\nout.g = logConvert(in.g);\nout.b = logConvert(in.b);' )
__children["LogConvert"]["LogConvert"]["__uiPosition"].setValue( imath.V2f( -16.1064777, 9.94525909 ) )
__children["LogConvert"]["BoxIn"]["__in"].setInput( __children["LogConvert"]["in"] )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn"]["__in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn"]["__in"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn"]["__in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
__children["LogConvert"]["BoxIn"]["__uiPosition"].setValue( imath.V2f( 1.66401052, 20.1632633 ) )
__children["LogConvert"]["__uiPosition"].setValue( imath.V2f( -75.882103, 22.2637253 ) )
__children["LogConvert"]["BoxOut"]["in"].setInput( __children["LogConvert"]["OSLImage"]["out"] )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxOut"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxOut"]["__out"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
__children["LogConvert"]["BoxOut"]["passThrough"].setInput( __children["LogConvert"]["BoxIn"]["out"] )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxOut"]["passThrough"], 'noduleLayout:section', 'top' )
__children["LogConvert"]["BoxOut"]["enabled"].setInput( __children["LogConvert"]["enabled"] )
__children["LogConvert"]["BoxOut"]["__uiPosition"].setValue( imath.V2f( 3.164011, -0.566205263 ) )
__children["LogConvert"]["out"].setInput( __children["LogConvert"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["LogConvert"]["out"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["out"], 'noduleLayout:section', 'bottom' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["out"], 'layout:index', 3 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["enabled"], 'layout:section', 'Node' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["enabled"], 'layout:index', 4 )
__children["LogConvert"]["BoxIn1"]["name"].setValue( 'curve' )
__children["LogConvert"]["BoxIn1"]["__in"].setInput( __children["LogConvert"]["curve"] )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn1"]["__in"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn1"]["__in"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn1"]["__in"], 'description', '' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn1"]["__in"], 'label', 'curve' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn1"]["__in"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn1"]["__in"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn1"]["__in"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn1"]["__in"], 'nodule:type', None )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn1"]["__in"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn1"]["__in"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn1"]["__in"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn1"]["__in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn1"]["out"], 'noduleLayout:section', 'right' )
__children["LogConvert"]["BoxIn1"]["__uiPosition"].setValue( imath.V2f( -28.7436657, 13.6452618 ) )
__children["LogConvert"]["curve"].setValue( 1 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'description', '' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'label', 'curve' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'layout:index', 0 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'presetsPlugValueWidget:allowCustom', False )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'preset:ACEScc', 0 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'preset:ACEScct', 1 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'preset:Arri LogC3', 2 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'preset:Arri LogC4', 3 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'preset:Blackmagic Film Gen5', 4 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'preset:Canon CLog2', 5 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'preset:Canon CLog3', 6 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'preset:DJI DLog', 7 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'preset:Fujifilm FLog', 8 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'preset:GoPro ProTune', 9 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'preset:Leica LLog', 10 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'preset:Nikon NLog', 11 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'preset:Panasonic VLog', 12 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'preset:Red Log3G10', 13 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'preset:Sony SLog2', 14 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'preset:Sony SLog3', 15 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'preset:DaVinci Intermediate', 16 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'preset:Filmlight TLog', 17 )
Gaffer.Metadata.registerValue( __children["LogConvert"]["curve"], 'preset:Kodak Cineon', 18 )
__children["LogConvert"]["BoxIn2"]["name"].setValue( 'invert' )
__children["LogConvert"]["BoxIn2"]["__in"].setInput( __children["LogConvert"]["invert"] )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn2"]["__in"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn2"]["__in"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn2"]["__in"], 'description', '' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn2"]["__in"], 'label', 'invert' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn2"]["__in"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn2"]["__in"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn2"]["__in"], 'plugValueWidget:type', None )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn2"]["__in"], 'nodule:type', None )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn2"]["__in"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn2"]["__in"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn2"]["__in"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn2"]["__in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["LogConvert"]["BoxIn2"]["out"], 'noduleLayout:section', 'right' )
__children["LogConvert"]["BoxIn2"]["__uiPosition"].setValue( imath.V2f( -28.8498669, 8.74525928 ) )
Gaffer.Metadata.registerValue( __children["LogConvert"]["invert"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["invert"], 'userDefault', None )
Gaffer.Metadata.registerValue( __children["LogConvert"]["invert"], 'description', '' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["invert"], 'label', 'invert' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["invert"], 'presetNames', None )
Gaffer.Metadata.registerValue( __children["LogConvert"]["invert"], 'presetValues', None )
Gaffer.Metadata.registerValue( __children["LogConvert"]["invert"], 'plugValueWidget:type', 'GafferUI.BoolPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["invert"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["invert"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["LogConvert"]["invert"], 'noduleLayout:label', None )
Gaffer.Metadata.registerValue( __children["LogConvert"]["invert"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["LogConvert"]["invert"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["LogConvert"]["invert"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["LogConvert"]["invert"], 'layout:index', 1 )


del __children

