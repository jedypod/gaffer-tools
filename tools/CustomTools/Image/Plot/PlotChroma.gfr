import Gaffer
import GafferImage
import GafferOSL
import GafferScene
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["ChromaPosition"] = GafferOSL.OSLImage( "ChromaPosition" )
parent.addChild( __children["ChromaPosition"] )
__children["ChromaPosition"]["channels"].addChild( Gaffer.NameValuePlug( "", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 1, 1, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "channel", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["ChromaPosition"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["inRGB"] = GafferOSL.OSLCode( "inRGB" )
parent.addChild( __children["inRGB"] )
__children["inRGB"]["out"].addChild( Gaffer.Color3fPlug( "out", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["inRGB"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ImageToPoints"] = GafferScene.ImageToPoints( "ImageToPoints" )
parent.addChild( __children["ImageToPoints"] )
__children["ImageToPoints"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["CopyChannels"] = GafferImage.CopyChannels( "CopyChannels" )
parent.addChild( __children["CopyChannels"] )
__children["CopyChannels"]["in"].addChild( GafferImage.ImagePlug( "in2", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["CopyChannels"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["xyChromaN"] = GafferOSL.OSLCode( "xyChromaN" )
parent.addChild( __children["xyChromaN"] )
__children["xyChromaN"]["parameters"].addChild( Gaffer.Color3fPlug( "in", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["xyChromaN"]["out"].addChild( Gaffer.Color3fPlug( "out", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["xyChromaN"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ShuffleLayer3"] = Gaffer.Reference( "ShuffleLayer3" )
parent.addChild( __children["ShuffleLayer3"] )
__children["ShuffleLayer3"].load( "ShuffleLayer.grf" )
__children["ShuffleLayer3"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Dot33"] = Gaffer.Dot( "Dot33" )
parent.addChild( __children["Dot33"] )
__children["Dot33"].setup( GafferImage.ImagePlug( "in", ) )
__children["Dot33"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["xzCoordYCh"] = GafferOSL.OSLCode( "xzCoordYCh" )
parent.addChild( __children["xzCoordYCh"] )
__children["xzCoordYCh"]["parameters"].addChild( Gaffer.Color3fPlug( "in", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["xzCoordYCh"]["parameters"].addChild( Gaffer.FloatPlug( "ar", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["xzCoordYCh"]["out"].addChild( Gaffer.Color3fPlug( "out", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["xzCoordYCh"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression2"] = Gaffer.Expression( "Expression2" )
parent.addChild( __children["Expression2"] )
__children["Expression2"]["__in"].addChild( GafferImage.AtomicFormatPlug( "p0", defaultValue = GafferImage.Format(), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression2"]["__out"].addChild( Gaffer.FloatPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression2"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
Gaffer.Metadata.registerValue( __children["ChromaPosition"], 'noduleLayout:customGadget:addButtonTop:visible', True )
Gaffer.Metadata.registerValue( __children["ChromaPosition"], 'noduleLayout:customGadget:addButtonBottom:visible', True )
Gaffer.Metadata.registerValue( __children["ChromaPosition"], 'noduleLayout:customGadget:addButtonLeft:visible', True )
Gaffer.Metadata.registerValue( __children["ChromaPosition"], 'noduleLayout:customGadget:addButtonRight:visible', True )
Gaffer.Metadata.registerValue( __children["ChromaPosition"], 'description', 'Executes OSL shaders to perform image processing. Use the shaders from\nthe OSL/ImageProcessing menu to read values from the input image and\nthen write values back to it.' )
__children["ChromaPosition"]["in"].setInput( __children["Dot33"]["out"] )
__children["ChromaPosition"]["channels"]["channel"]["value"].setInput( __children["xzCoordYCh"]["out"]["out"] )
__children["ChromaPosition"]["__uiPosition"].setValue( imath.V2f( -89.960762, -100.541451 ) )
Gaffer.Metadata.registerValue( __children["inRGB"], 'noduleLayout:customGadget:addButtonTop:visible', True )
Gaffer.Metadata.registerValue( __children["inRGB"], 'noduleLayout:customGadget:addButtonBottom:visible', True )
Gaffer.Metadata.registerValue( __children["inRGB"], 'noduleLayout:customGadget:addButtonLeft:visible', True )
Gaffer.Metadata.registerValue( __children["inRGB"], 'noduleLayout:customGadget:addButtonRight:visible', True )
__children["inRGB"]["code"].setValue( 'color rgb = inLayer("", 0);\n\nout = rgb;' )
__children["inRGB"]["__uiPosition"].setValue( imath.V2f( -116.655518, -92.9353561 ) )
Gaffer.MetadataAlgo.setNumericBookmark( __children["ImageToPoints"].scriptNode(), 6, __children["ImageToPoints"] )
__children["ImageToPoints"]["image"].setInput( __children["CopyChannels"]["out"] )
__children["ImageToPoints"]["position"].setValue( IECore.StringVectorData( [ 'pos.R', 'pos.G', 'pos.B', 'pos.A' ] ) )
__children["ImageToPoints"]["primitiveVariables"].setValue( '*' )
__children["ImageToPoints"]["__uiPosition"].setValue( imath.V2f( -81.5010071, -124.629791 ) )
__children["CopyChannels"]["in"][0].setInput( __children["Dot33"]["out"] )
__children["CopyChannels"]["in"][1].setInput( __children["ShuffleLayer3"]["out"] )
__children["CopyChannels"]["channels"].setValue( 'pos.[RGB]' )
__children["CopyChannels"]["__uiPosition"].setValue( imath.V2f( -81.5010071, -116.465744 ) )
__children["xyChromaN"]["parameters"]["in"].setInput( __children["inRGB"]["out"]["out"] )
__children["xyChromaN"]["code"].setValue( 'float mx = max(in.r, max(in.g, in.b));\nfloat mn = min(in.r, min(in.g, in.b));\n\nfloat ch = 1-mn/mx;\n// float ch = mx-mn;\nout.r = ch;\nout.g = mx;' )
__children["xyChromaN"]["__uiPosition"].setValue( imath.V2f( -104.843994, -98.6291275 ) )
Gaffer.Metadata.registerValue( __children["ShuffleLayer3"], 'description', 'Shuffle RGBA into specified layer name.' )
Gaffer.Metadata.registerValue( __children["ShuffleLayer3"], 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( __children["ShuffleLayer3"], 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( __children["ShuffleLayer3"], 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( __children["ShuffleLayer3"], 'noduleLayout:customGadget:addButtonRight:visible', False )
__children["ShuffleLayer3"]["in"].setInput( __children["ChromaPosition"]["out"] )
__children["ShuffleLayer3"]["outLayer"].setValue( 'pos' )
__children["ShuffleLayer3"]["__uiPosition"].setValue( imath.V2f( -89.960762, -108.133713 ) )
__children["Dot33"]["__uiPosition"].setValue( imath.V2f( -84.5010071, -80.7396088 ) )
Gaffer.Metadata.registerValue( __children["xzCoordYCh"], 'noduleLayout:customGadget:addButtonTop:visible', True )
Gaffer.Metadata.registerValue( __children["xzCoordYCh"], 'noduleLayout:customGadget:addButtonBottom:visible', True )
Gaffer.Metadata.registerValue( __children["xzCoordYCh"], 'noduleLayout:customGadget:addButtonLeft:visible', True )
Gaffer.Metadata.registerValue( __children["xzCoordYCh"], 'noduleLayout:customGadget:addButtonRight:visible', True )
__children["xzCoordYCh"]["parameters"]["in"].setInput( __children["inRGB"]["out"]["out"] )
__children["xzCoordYCh"]["parameters"]["ar"].setInput( __children["Expression2"]["__out"]["p0"] )
__children["xzCoordYCh"]["code"].setValue( 'float mx = max(in.r, max(in.g, in.b));\nfloat mn = min(in.r, min(in.g, in.b));\n\nfloat ch = mx-mn;\nout.r = 1-u;\nout.g = ch;\nout.b = v/ar;\n' )
__children["xzCoordYCh"]["__uiPosition"].setValue( imath.V2f( -104.736328, -93.5353546 ) )
__children["Expression2"]["__in"]["p0"].setInput( __children["Dot33"]["out"]["format"] )
__children["Expression2"]["__uiPosition"].setValue( imath.V2f( -111.649559, -84.0940247 ) )
__children["Expression2"]["__engine"].setValue( 'python' )
__children["Expression2"]["__expression"].setValue( 'f = parent["__in"]["p0"]\nparent["__out"]["p0"] = f.width()/f.height()' )


del __children

