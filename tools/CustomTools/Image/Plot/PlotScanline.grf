import Gaffer
import GafferImage
import GafferOSL
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["OSLImage"] = GafferOSL.OSLImage( "OSLImage" )
parent.addChild( __children["OSLImage"] )
__children["OSLImage"]["channels"].addChild( Gaffer.NameValuePlug( "", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 1, 1, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "channel", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLImage"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["in"] = GafferImage.ImagePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["in"] )
__children["BoxIn"] = Gaffer.BoxIn( "BoxIn" )
parent.addChild( __children["BoxIn"] )
__children["BoxIn"].setup( GafferImage.ImagePlug( "out", ) )
__children["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOut"] = Gaffer.BoxOut( "BoxOut" )
parent.addChild( __children["BoxOut"] )
__children["BoxOut"].setup( GafferImage.ImagePlug( "in", ) )
__children["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["out"] = GafferImage.ImagePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["out"] )
__children["enabled"] = Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["enabled"] )
__children["OSLCode"] = GafferOSL.OSLCode( "OSLCode" )
parent.addChild( __children["OSLCode"] )
__children["OSLCode"]["parameters"].addChild( Gaffer.IntPlug( "line", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["parameters"].addChild( Gaffer.FloatPlug( "th", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["parameters"].addChild( Gaffer.FloatPlug( "mv", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["parameters"].addChild( Gaffer.IntPlug( "drawLines", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"]["out"].addChild( Gaffer.Color3fPlug( "out", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLCode"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression1"] = Gaffer.Expression( "Expression1" )
parent.addChild( __children["Expression1"] )
__children["Expression1"]["__in"].addChild( Gaffer.AtomicBox2iPlug( "p0", defaultValue = imath.Box2i(), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression1"]["__in"].addChild( GafferImage.AtomicFormatPlug( "p1", defaultValue = GafferImage.Format(), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression1"]["__in"].addChild( Gaffer.IntPlug( "p2", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression1"]["__out"].addChild( Gaffer.Box2iPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Box2i(), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression1"]["__out"].addChild( Gaffer.FloatPlug( "p1", direction = Gaffer.Plug.Direction.Out, defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression1"]["__out"].addChild( Gaffer.Box2iPlug( "p2", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Box2i(), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Crop"] = GafferImage.Crop( "Crop" )
parent.addChild( __children["Crop"] )
__children["Crop"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Resize"] = GafferImage.Resize( "Resize" )
parent.addChild( __children["Resize"] )
__children["Resize"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Blur"] = GafferImage.Blur( "Blur" )
parent.addChild( __children["Blur"] )
__children["Blur"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"] = Gaffer.Expression( "Expression" )
parent.addChild( __children["Expression"] )
__children["Expression"]["__in"].addChild( Gaffer.IntPlug( "p0", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__out"].addChild( Gaffer.BoolPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["mv"] = Gaffer.FloatPlug( "mv", defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["mv"] )
__children["drawLines"] = Gaffer.IntPlug( "drawLines", defaultValue = 1, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["drawLines"] )
__children["scanline"] = Gaffer.IntPlug( "scanline", defaultValue = 256, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["scanline"] )
__children["OSLImage"]["in"].setInput( __children["Resize"]["out"] )
__children["OSLImage"]["channels"]["channel"]["value"].setInput( __children["OSLCode"]["out"]["out"] )
__children["OSLImage"]["__uiPosition"].setValue( imath.V2f( -16.6338615, 17.4207439 ) )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["in"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["in"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["in"], 'layout:index', 0 )
__children["BoxIn"]["__in"].setInput( __children["in"] )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
__children["BoxIn"]["__uiPosition"].setValue( imath.V2f( -16.6338615, 37.0809021 ) )
__children["BoxOut"]["in"].setInput( __children["Blur"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
__children["BoxOut"]["passThrough"].setInput( __children["BoxIn"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["passThrough"], 'noduleLayout:section', 'top' )
__children["BoxOut"]["enabled"].setInput( __children["enabled"] )
__children["BoxOut"]["__uiPosition"].setValue( imath.V2f( -15.1338615, 2.39819336 ) )
__children["out"].setInput( __children["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["out"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["out"], 'noduleLayout:section', 'bottom' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:index', 1 )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:section', 'Node' )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:index', 5 )
Gaffer.Metadata.registerValue( __children["OSLCode"], 'noduleLayout:customGadget:addButtonTop:visible', True )
Gaffer.Metadata.registerValue( __children["OSLCode"], 'noduleLayout:customGadget:addButtonBottom:visible', True )
Gaffer.Metadata.registerValue( __children["OSLCode"], 'noduleLayout:customGadget:addButtonLeft:visible', True )
Gaffer.Metadata.registerValue( __children["OSLCode"], 'noduleLayout:customGadget:addButtonRight:visible', True )
Gaffer.MetadataAlgo.setNumericBookmark( __children["OSLCode"].scriptNode(), 1, __children["OSLCode"] )
__children["OSLCode"]["parameters"]["line"].setInput( __children["scanline"] )
__children["OSLCode"]["parameters"]["th"].setInput( __children["Expression1"]["__out"]["p1"] )
__children["OSLCode"]["parameters"]["mv"].setInput( __children["mv"] )
__children["OSLCode"]["parameters"]["drawLines"].setInput( __children["drawLines"] )
__children["OSLCode"]["code"].setValue( '// Full credit to Daniel Dresser for graciously sharing this technique!\ncolor rgb = inLayer("", 0);\n\ncolor c = rgb/mv;\n\nout = min(linearstep(c-th, c, v), 1-linearstep(c, c+th, v));\nif (drawLines) {\n\tfloat o1 = 1/mv;\n\tout.r += min(linearstep(o1-th, o1, v), 1-linearstep(o1, o1+th, v));\n}' )
__children["OSLCode"]["__uiPosition"].setValue( imath.V2f( -27.5960197, 18.0207443 ) )
__children["Expression1"]["__in"]["p0"].setInput( __children["BoxIn"]["out"]["dataWindow"] )
__children["Expression1"]["__in"]["p1"].setInput( __children["BoxIn"]["out"]["format"] )
__children["Expression1"]["__uiPosition"].setValue( imath.V2f( -33.324501, 32.8043976 ) )
__children["Crop"]["in"].setInput( __children["BoxIn"]["out"] )
__children["Crop"]["area"].setInput( __children["Expression1"]["__out"]["p0"] )
__children["Crop"]["__uiPosition"].setValue( imath.V2f( -16.6338615, 28.7488708 ) )
__children["Resize"]["in"].setInput( __children["Crop"]["out"] )
__children["Resize"]["format"]["displayWindow"].setInput( __children["Expression1"]["__out"]["p2"] )
__children["Resize"]["fitMode"].setValue( 4 )
__children["Resize"]["__uiPosition"].setValue( imath.V2f( -16.6338615, 23.0848064 ) )
__children["Blur"]["enabled"].setInput( __children["Expression"]["__out"]["p0"] )
__children["Blur"]["in"].setInput( __children["OSLImage"]["out"] )
__children["Blur"]["radius"]["x"].setValue( 1.0 )
__children["Blur"]["radius"]["y"].setInput( __children["Blur"]["radius"]["x"] )
__children["Blur"]["__uiPosition"].setValue( imath.V2f( -16.6338615, 10.7302246 ) )
__children["Expression"]["__uiPosition"].setValue( imath.V2f( -12.4674244, 11.6079264 ) )
Gaffer.Metadata.registerValue( __children["mv"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["mv"], 'label', 'max value' )
Gaffer.Metadata.registerValue( __children["mv"], 'description', 'max value to plot' )
Gaffer.Metadata.registerValue( __children["mv"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["mv"], 'layout:index', 3 )
Gaffer.Metadata.registerValue( __children["drawLines"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["drawLines"], 'label', 'draw lines' )
Gaffer.Metadata.registerValue( __children["drawLines"], 'description', 'draw red line at 1' )
Gaffer.Metadata.registerValue( __children["drawLines"], 'plugValueWidget:type', 'GafferUI.BoolPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["drawLines"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["drawLines"], 'layout:index', 4 )
Gaffer.Metadata.registerValue( __children["scanline"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["scanline"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["scanline"], 'layout:index', 2 )
Gaffer.Metadata.registerValue( __children["scanline"], 'label', 'scanline' )
Gaffer.Metadata.registerValue( __children["scanline"], 'description', 'the position of the horizontal scanline to plot ' )
__children["Expression1"]["__engine"].setValue( 'python' )
__children["Expression1"]["__expression"].setValue( 'import imath\n\n# Get input format\ninF = parent["__in"]["p0"]\n\n# Crop to single pixel at scanline\ncropF = imath.Box2i(inF)\ncropF.setMax(imath.V2i(inF.max().x, parent["__in"]["p2"]+1))\ncropF.setMin(imath.V2i(inF.min().x, parent["__in"]["p2"]))\nparent["__out"]["p0"] = cropF\n\n# Resize back to input format\nparent["__out"]["p2"] = inF\n\nf = parent["__in"]["p1"]\nw = f.width()\nh = f.height()\nparent["__out"]["p1"] = 1/h' )
__children["Expression"]["__engine"].setValue( 'python' )
__children["Expression"]["__expression"].setValue( 'parent["__out"]["p0"] = not parent["__in"]["p0"]' )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonRight:visible', False )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'description', 'Plot x position vs pixel intensity for pixels at specified horizontal scanline.' )
Gaffer.Metadata.registerValue( parent, 'documentation:url', '' )


del __children

