import Gaffer
import GafferImage
import GafferOSL
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 4, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 10, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["IBDespill"] = GafferOSL.OSLCode( "IBDespill" )
parent.addChild( __children["IBDespill"] )
__children["IBDespill"]["parameters"].addChild( Gaffer.Color3fPlug( "screen", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["IBDespill"]["parameters"].addChild( Gaffer.IntPlug( "k", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["IBDespill"]["parameters"].addChild( Gaffer.FloatPlug( "wt", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["IBDespill"]["parameters"].addChild( Gaffer.FloatPlug( "lm", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["IBDespill"]["parameters"].addChild( Gaffer.Color3fPlug( "tg", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["IBDespill"]["parameters"].addChild( Gaffer.IntPlug( "premult", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["IBDespill"]["out"].addChild( Gaffer.Color3fPlug( "out", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["IBDespill"]["out"].addChild( Gaffer.FloatPlug( "alpha", direction = Gaffer.Plug.Direction.Out, defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["IBDespill"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLImage"] = GafferOSL.OSLImage( "OSLImage" )
parent.addChild( __children["OSLImage"] )
__children["OSLImage"]["channels"].addChild( Gaffer.NameValuePlug( "", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 1, 1, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "channel", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLImage"]["channels"].addChild( Gaffer.NameValuePlug( "A", Gaffer.FloatPlug( "value", defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "channel1", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLImage"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["in"] = GafferImage.ImagePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["in"] )
__children["BoxIn"] = Gaffer.BoxIn( "BoxIn" )
parent.addChild( __children["BoxIn"] )
__children["BoxIn"].setup( GafferImage.ImagePlug( "out", ) )
__children["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOut"] = Gaffer.BoxOut( "BoxOut" )
parent.addChild( __children["BoxOut"] )
__children["BoxOut"].setup( GafferImage.ImagePlug( "in", ) )
__children["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["out"] = GafferImage.ImagePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["out"] )
__children["enabled"] = Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["enabled"] )
__children["screenIn"] = Gaffer.BoxIn( "screenIn" )
parent.addChild( __children["screenIn"] )
__children["screenIn"].setup( GafferImage.ImagePlug( "out", ) )
__children["screenIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["screen"] = GafferImage.ImagePlug( "screen", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["screen"] )
__children["screenColor"] = Gaffer.IntPlug( "screenColor", defaultValue = 2, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["screenColor"] )
__children["bias"] = Gaffer.FloatPlug( "bias", defaultValue = 0.5, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["bias"] )
__children["limit"] = Gaffer.FloatPlug( "limit", defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["limit"] )
__children["InScreen"] = GafferOSL.OSLShader( "InScreen" )
parent.addChild( __children["InScreen"] )
__children["InScreen"].loadShader( "ImageProcessing/InLayer" )
__children["InScreen"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["pick"] = Gaffer.Color3fPlug( "pick", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["pick"] )
__children["useScreenInput"] = Gaffer.BoolPlug( "useScreenInput", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["useScreenInput"] )
__children["UseScreenInput"] = Gaffer.Box( "UseScreenInput" )
parent.addChild( __children["UseScreenInput"] )
__children["UseScreenInput"].addChild( GafferImage.Shuffle( "Shuffle" ) )
__children["UseScreenInput"]["Shuffle"]["shuffles"].addChild( Gaffer.ShufflePlug( "shuffle0", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["UseScreenInput"]["Shuffle"]["shuffles"].addChild( Gaffer.ShufflePlug( "shuffle1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["UseScreenInput"]["Shuffle"]["shuffles"].addChild( Gaffer.ShufflePlug( "shuffle2", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["UseScreenInput"]["Shuffle"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["UseScreenInput"].addChild( GafferImage.ImagePlug( "screen", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["UseScreenInput"].addChild( GafferImage.CopyChannels( "CopyChannels" ) )
__children["UseScreenInput"]["CopyChannels"]["in"].addChild( GafferImage.ImagePlug( "in2", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["UseScreenInput"]["CopyChannels"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["UseScreenInput"].addChild( GafferImage.ImagePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["UseScreenInput"].addChild( GafferImage.ImagePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["UseScreenInput"].addChild( Gaffer.BoxIn( "ScreenIn" ) )
__children["UseScreenInput"]["ScreenIn"].setup( GafferImage.ImagePlug( "out", ) )
__children["UseScreenInput"]["ScreenIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["UseScreenInput"].addChild( Gaffer.BoxIn( "BoxIn" ) )
__children["UseScreenInput"]["BoxIn"].setup( GafferImage.ImagePlug( "out", ) )
__children["UseScreenInput"]["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["UseScreenInput"].addChild( Gaffer.BoxOut( "BoxOut" ) )
__children["UseScreenInput"]["BoxOut"].setup( GafferImage.ImagePlug( "in", ) )
__children["UseScreenInput"]["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["UseScreenInput"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["UseScreenInput"].addChild( Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["tg"] = Gaffer.Color3fPlug( "tg", defaultValue = imath.Color3f( 0.100000001, 0.100000001, 0.100000001 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["tg"] )
__children["premult"] = Gaffer.BoolPlug( "premult", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["premult"] )
Gaffer.Metadata.registerValue( __children["IBDespill"], 'noduleLayout:customGadget:addButtonTop:visible', True )
Gaffer.Metadata.registerValue( __children["IBDespill"], 'noduleLayout:customGadget:addButtonBottom:visible', True )
Gaffer.Metadata.registerValue( __children["IBDespill"], 'noduleLayout:customGadget:addButtonLeft:visible', True )
Gaffer.Metadata.registerValue( __children["IBDespill"], 'noduleLayout:customGadget:addButtonRight:visible', True )
__children["IBDespill"]["parameters"]["screen"].setInput( __children["InScreen"]["out"]["layerColor"] )
__children["IBDespill"]["parameters"]["k"].setInput( __children["screenColor"] )
__children["IBDespill"]["parameters"]["wt"].setInput( __children["bias"] )
__children["IBDespill"]["parameters"]["lm"].setInput( __children["limit"] )
__children["IBDespill"]["parameters"]["tg"].setInput( __children["tg"] )
__children["IBDespill"]["parameters"]["premult"].setInput( __children["premult"] )
__children["IBDespill"]["code"].setValue( '// Using matrix since no support for structs and no vector4, need to return alpha\nmatrix despill(color rgb) {\n\t// Figure out channel order based on screenColor\n\tfloat c0 = k==0?rgb.r:k==1?rgb.g:rgb.b;\n\tfloat c1 = k==0?rgb.g:k==1?rgb.r:rgb.r;\n\tfloat c2 = k==0?rgb.b:k==1?rgb.b:rgb.g;\n\tfloat ds = (c1*wt+c2*(1-wt))*lm;\n\tmatrix result;\n\tresult[0][0] = k==0?min(c0,ds):rgb.r;\n\tresult[1][0] = k==1?min(c0,ds):rgb.g;\n\tresult[2][0] = k==2?min(c0,ds):rgb.b;\n\tresult[3][0] = c0-ds;\n\treturn result;\n}\n\ncolor rgb = inLayer("", 0); // Input RGB\n\nmatrix despillRGB = despill(rgb);\nmatrix despillScreen = despill(screen);\n\nfloat normalized = clamp(despillRGB[3][0]/despillScreen[3][0],0,1);\n\ncolor dsRGB = color(despillRGB[0][0], despillRGB[1][0], despillRGB[2][0]);\ncolor dsScreen = color(despillScreen[0][0], despillScreen[1][0], despillScreen[2][0]);\ncolor targetOffset = (tg-dsScreen)*normalized;\n\nout = targetOffset + dsRGB;\nalpha = 1;\nif (premult) {\n\talpha = 1-normalized;\n\tout *= alpha;\n}' )
__children["IBDespill"]["__uiPosition"].setValue( imath.V2f( 2.93783998, -24.4755783 ) )
__children["OSLImage"]["in"].setInput( __children["UseScreenInput"]["out"] )
__children["OSLImage"]["channels"]["channel"]["value"].setInput( __children["IBDespill"]["out"]["out"] )
__children["OSLImage"]["channels"]["channel1"]["value"].setInput( __children["IBDespill"]["out"]["alpha"] )
__children["OSLImage"]["__uiPosition"].setValue( imath.V2f( 16.3999977, -25.0755787 ) )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["in"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["in"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["in"], 'layout:index', 0 )
__children["BoxIn"]["__in"].setInput( __children["in"] )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
__children["BoxIn"]["__uiPosition"].setValue( imath.V2f( 17.8999977, -7.92557907 ) )
__children["BoxOut"]["in"].setInput( __children["OSLImage"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'plugValueWidget:type', '' )
__children["BoxOut"]["passThrough"].setInput( __children["BoxIn"]["out"] )
__children["BoxOut"]["enabled"].setInput( __children["enabled"] )
__children["BoxOut"]["__uiPosition"].setValue( imath.V2f( 17.8999977, -33.7255783 ) )
__children["out"].setInput( __children["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["out"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["out"], 'noduleLayout:section', 'bottom' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:index', 9 )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:section', 'Node' )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:index', 10 )
Gaffer.Metadata.registerValue( __children["screenIn"], 'noduleLayout:customGadget:addButtonTop:visible', True )
Gaffer.Metadata.registerValue( __children["screenIn"], 'noduleLayout:customGadget:addButtonBottom:visible', True )
Gaffer.Metadata.registerValue( __children["screenIn"], 'noduleLayout:customGadget:addButtonLeft:visible', True )
Gaffer.Metadata.registerValue( __children["screenIn"], 'noduleLayout:customGadget:addButtonRight:visible', True )
Gaffer.Metadata.registerValue( __children["screenIn"], 'description', '' )
__children["screenIn"]["name"].setValue( 'screen' )
__children["screenIn"]["__in"].setInput( __children["screen"] )
Gaffer.Metadata.registerValue( __children["screenIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["screenIn"]["out"], 'noduleLayout:section', 'bottom' )
__children["screenIn"]["__uiPosition"].setValue( imath.V2f( 4.64248753, -7.92557907 ) )
Gaffer.Metadata.registerValue( __children["screen"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["screen"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["screen"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["screen"], 'layout:index', 1 )
Gaffer.Metadata.registerValue( __children["screen"], 'description', 'clean screen input' )
Gaffer.Metadata.registerValue( __children["screenColor"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["screenColor"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["screenColor"], 'layout:index', 2 )
Gaffer.Metadata.registerValue( __children["screenColor"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["screenColor"], 'preset:red', 0 )
Gaffer.Metadata.registerValue( __children["screenColor"], 'preset:green', 1 )
Gaffer.Metadata.registerValue( __children["screenColor"], 'preset:blue', 2 )
Gaffer.Metadata.registerValue( __children["screenColor"], 'label', 'screen' )
Gaffer.Metadata.registerValue( __children["screenColor"], 'description', 'Choose the dominant chroma screen color.' )
Gaffer.Metadata.registerValue( __children["bias"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["bias"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["bias"], 'layout:index', 5 )
Gaffer.Metadata.registerValue( __children["bias"], 'label', 'bias' )
Gaffer.Metadata.registerValue( __children["limit"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["limit"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["limit"], 'layout:index', 6 )
Gaffer.Metadata.registerValue( __children["limit"], 'label', 'limit' )
__children["InScreen"]["parameters"]["layerName"].setValue( 'screen' )
__children["InScreen"]["parameters"]["defaultColor"].setInput( __children["pick"] )
__children["InScreen"]["__uiPosition"].setValue( imath.V2f( -8.85952282, -21.4755783 ) )
Gaffer.Metadata.registerValue( __children["pick"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["pick"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["pick"], 'layout:index', 4 )
Gaffer.Metadata.registerValue( __children["pick"], 'label', 'pick' )
Gaffer.Metadata.registerValue( __children["pick"], 'description', 'Pick a constant color to key, if screen input is not connected.' )
Gaffer.Metadata.registerValue( __children["useScreenInput"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["useScreenInput"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["useScreenInput"], 'layout:index', 3 )
Gaffer.Metadata.registerValue( __children["useScreenInput"], 'label', 'use screen input' )
Gaffer.Metadata.registerValue( __children["useScreenInput"], 'description', 'If enabled, use the screen input instead of the constant pick color.' )
Gaffer.Metadata.registerValue( __children["UseScreenInput"], 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( __children["UseScreenInput"], 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( __children["UseScreenInput"], 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( __children["UseScreenInput"], 'noduleLayout:customGadget:addButtonRight:visible', False )
Gaffer.Metadata.registerValue( __children["UseScreenInput"], 'description', 'if enabled, add "screen" layer for the screen input, for use by the IBKey node' )
__children["UseScreenInput"]["Shuffle"]["in"].setInput( __children["UseScreenInput"]["ScreenIn"]["out"] )
__children["UseScreenInput"]["Shuffle"]["shuffles"]["shuffle0"]["source"].setValue( 'R' )
__children["UseScreenInput"]["Shuffle"]["shuffles"]["shuffle0"]["destination"].setValue( 'screen.R' )
__children["UseScreenInput"]["Shuffle"]["shuffles"]["shuffle1"]["source"].setValue( 'G' )
__children["UseScreenInput"]["Shuffle"]["shuffles"]["shuffle1"]["destination"].setValue( 'screen.G' )
__children["UseScreenInput"]["Shuffle"]["shuffles"]["shuffle2"]["source"].setValue( 'B' )
__children["UseScreenInput"]["Shuffle"]["shuffles"]["shuffle2"]["destination"].setValue( 'screen.B' )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["Shuffle"]["shuffles"]["shuffle0"]["destination"], 'channelPlugValueWidget:isCustom', True )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["Shuffle"]["shuffles"]["shuffle1"]["destination"], 'channelPlugValueWidget:isCustom', True )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["Shuffle"]["shuffles"]["shuffle2"]["destination"], 'channelPlugValueWidget:isCustom', True )
__children["UseScreenInput"]["Shuffle"]["__uiPosition"].setValue( imath.V2f( -3.42248535, -6.35912704 ) )
__children["UseScreenInput"]["screen"].setInput( __children["screenIn"]["out"] )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["screen"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["screen"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["screen"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["screen"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["CopyChannels"], 'noduleLayout:customGadget:addButtonTop:visible', True )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["CopyChannels"], 'noduleLayout:customGadget:addButtonBottom:visible', True )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["CopyChannels"], 'noduleLayout:customGadget:addButtonLeft:visible', True )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["CopyChannels"], 'noduleLayout:customGadget:addButtonRight:visible', True )
__children["UseScreenInput"]["CopyChannels"]["in"][0].setInput( __children["UseScreenInput"]["Shuffle"]["out"] )
__children["UseScreenInput"]["CopyChannels"]["in"][1].setInput( __children["UseScreenInput"]["BoxIn"]["out"] )
__children["UseScreenInput"]["CopyChannels"]["channels"].setValue( '[RGB]' )
__children["UseScreenInput"]["CopyChannels"]["__uiPosition"].setValue( imath.V2f( -0.422485352, -12.0231895 ) )
__children["UseScreenInput"]["in"].setInput( __children["BoxIn"]["out"] )
__children["UseScreenInput"]["out"].setInput( __children["UseScreenInput"]["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["out"], 'description', 'Outputs the input specified by the index.' )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["out"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["out"], 'noduleLayout:section', 'bottom' )
__children["UseScreenInput"]["ScreenIn"]["name"].setValue( 'screen' )
__children["UseScreenInput"]["ScreenIn"]["__in"].setInput( __children["UseScreenInput"]["screen"] )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["ScreenIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["ScreenIn"]["__in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["ScreenIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["ScreenIn"]["__in"], 'noduleLayout:spacing', 2.0 )
__children["UseScreenInput"]["ScreenIn"]["__uiPosition"].setValue( imath.V2f( -3.42248535, 1.97290421 ) )
__children["UseScreenInput"]["BoxIn"]["__in"].setInput( __children["UseScreenInput"]["in"] )
__children["UseScreenInput"]["BoxIn"]["__uiPosition"].setValue( imath.V2f( 11.7594299, 1.58264625 ) )
__children["UseScreenInput"]["BoxOut"]["in"].setInput( __children["UseScreenInput"]["CopyChannels"]["out"] )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["BoxOut"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["BoxOut"]["__out"], 'description', 'Outputs the input specified by the index.' )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["BoxOut"]["__out"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["UseScreenInput"]["BoxOut"]["__out"], 'noduleLayout:section', 'bottom' )
__children["UseScreenInput"]["BoxOut"]["passThrough"].setInput( __children["UseScreenInput"]["BoxIn"]["out"] )
__children["UseScreenInput"]["BoxOut"]["enabled"].setInput( __children["UseScreenInput"]["enabled"] )
__children["UseScreenInput"]["BoxOut"]["__uiPosition"].setValue( imath.V2f( 10.2594299, -20.3552208 ) )
__children["UseScreenInput"]["__uiPosition"].setValue( imath.V2f( 16.3999977, -16.4255791 ) )
__children["UseScreenInput"]["enabled"].setInput( __children["useScreenInput"] )
Gaffer.Metadata.registerValue( __children["tg"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["tg"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["tg"], 'layout:index', 7 )
Gaffer.Metadata.registerValue( __children["tg"], 'label', 'screen target' )
Gaffer.Metadata.registerValue( __children["tg"], 'description', 'Set the target screen color. \n\n  - If screen input is used, this will normalize the screen color to a constant color target as specified.\n  - If using a pick color, this will normalize the picked color to the target specified.' )
__children["tg"]["g"].setInput( __children["tg"]["r"] )
__children["tg"]["b"].setInput( __children["tg"]["r"] )
Gaffer.Metadata.registerValue( __children["premult"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["premult"], 'label', 'premult' )
Gaffer.Metadata.registerValue( __children["premult"], 'description', 'Premultiply rgb by alpha. Optional depending on usage. \n\n  - Usage option 1: Do not premult, set target screen color to 0. This is IBK style extraction.\n  - Usage option 2: Do premult, tweak target screen color as desired to get a good edge.' )
Gaffer.Metadata.registerValue( parent, 'description', 'Image-Based Keyer based on a despill without subtracting from the dominant channel. Can give better results if premulting' )
Gaffer.Metadata.registerValue( parent, 'nodeGadget:color', imath.Color3f( 0.100000001, 0.100000001, 0.100000001 ) )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonRight:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )


del __children

