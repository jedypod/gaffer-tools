import Gaffer
import GafferImage
import GafferOSL
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 4, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 10, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["IBKeyThreshold"] = GafferOSL.OSLCode( "IBKeyThreshold" )
parent.addChild( __children["IBKeyThreshold"] )
__children["IBKeyThreshold"]["parameters"].addChild( Gaffer.IntPlug( "sc", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["IBKeyThreshold"]["parameters"].addChild( Gaffer.FloatPlug( "w", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["IBKeyThreshold"]["parameters"].addChild( Gaffer.FloatPlug( "chs", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["IBKeyThreshold"]["parameters"].addChild( Gaffer.FloatPlug( "shs", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["IBKeyThreshold"]["out"].addChild( Gaffer.FloatPlug( "alpha", direction = Gaffer.Plug.Direction.Out, defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["IBKeyThreshold"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLImage"] = GafferOSL.OSLImage( "OSLImage" )
parent.addChild( __children["OSLImage"] )
__children["OSLImage"]["channels"].addChild( Gaffer.NameValuePlug( "A", Gaffer.FloatPlug( "value", defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "channel1", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLImage"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["in"] = GafferImage.ImagePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["in"] )
__children["BoxIn"] = Gaffer.BoxIn( "BoxIn" )
parent.addChild( __children["BoxIn"] )
__children["BoxIn"].setup( GafferImage.ImagePlug( "out", ) )
__children["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOut"] = Gaffer.BoxOut( "BoxOut" )
parent.addChild( __children["BoxOut"] )
__children["BoxOut"].setup( GafferImage.ImagePlug( "in", ) )
__children["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["out"] = GafferImage.ImagePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["out"] )
__children["enabled"] = Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["enabled"] )
__children["sc"] = Gaffer.IntPlug( "sc", defaultValue = 2, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["sc"] )
__children["w"] = Gaffer.FloatPlug( "w", defaultValue = 0.5, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["w"] )
__children["chs"] = Gaffer.FloatPlug( "chs", defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["chs"] )
__children["shs"] = Gaffer.FloatPlug( "shs", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["shs"] )
__children["Erode"] = GafferImage.Erode( "Erode" )
parent.addChild( __children["Erode"] )
__children["Erode"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["CopyChannels"] = GafferImage.CopyChannels( "CopyChannels" )
parent.addChild( __children["CopyChannels"] )
__children["CopyChannels"]["in"].addChild( GafferImage.ImagePlug( "in2", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["CopyChannels"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Premultiply"] = GafferImage.Premultiply( "Premultiply" )
parent.addChild( __children["Premultiply"] )
__children["Premultiply"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["erode"] = Gaffer.FloatPlug( "erode", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["erode"] )
__children["BoxIn1"] = Gaffer.BoxIn( "BoxIn1" )
parent.addChild( __children["BoxIn1"] )
__children["BoxIn1"].setup( Gaffer.IntPlug( "out", defaultValue = 2, ) )
__children["BoxIn2"] = Gaffer.BoxIn( "BoxIn2" )
parent.addChild( __children["BoxIn2"] )
__children["BoxIn2"].setup( Gaffer.FloatPlug( "out", defaultValue = 0.5, ) )
__children["BoxIn3"] = Gaffer.BoxIn( "BoxIn3" )
parent.addChild( __children["BoxIn3"] )
__children["BoxIn3"].setup( Gaffer.FloatPlug( "out", defaultValue = 1.0, ) )
__children["BoxIn4"] = Gaffer.BoxIn( "BoxIn4" )
parent.addChild( __children["BoxIn4"] )
__children["BoxIn4"].setup( Gaffer.FloatPlug( "out", defaultValue = 0.0, ) )
Gaffer.Metadata.registerValue( __children["IBKeyThreshold"], 'noduleLayout:customGadget:addButtonTop:visible', True )
Gaffer.Metadata.registerValue( __children["IBKeyThreshold"], 'noduleLayout:customGadget:addButtonBottom:visible', True )
Gaffer.Metadata.registerValue( __children["IBKeyThreshold"], 'noduleLayout:customGadget:addButtonLeft:visible', True )
Gaffer.Metadata.registerValue( __children["IBKeyThreshold"], 'noduleLayout:customGadget:addButtonRight:visible', True )
__children["IBKeyThreshold"]["parameters"]["sc"].setInput( __children["BoxIn1"]["out"] )
__children["IBKeyThreshold"]["parameters"]["w"].setInput( __children["BoxIn2"]["out"] )
__children["IBKeyThreshold"]["parameters"]["chs"].setInput( __children["BoxIn3"]["out"] )
__children["IBKeyThreshold"]["parameters"]["shs"].setInput( __children["BoxIn4"]["out"] )
__children["IBKeyThreshold"]["code"].setValue( 'float despill(color rgb) {\n\t// Figure out channel order based on screenColor\n\tfloat c0 = sc==0?rgb.r:sc==1?rgb.g:rgb.b; // dominant channel (B for blue screen)\n\tfloat c1 = sc==0?rgb.g:sc==1?rgb.r:rgb.r; // complement channel 1 (R for blue screen)\n\tfloat c2 = sc==0?rgb.b:sc==1?rgb.b:rgb.g; // complement channel 2 (G for blue screen)\n\treturn c0-(c1*w+c2*(1-w))*2/chs;\n}\n\ncolor rgb = inLayer("", 0); // Input RGB\n\nfloat drgb = despill(rgb+shs);\nalpha = 1-(drgb<0?1:0); // Thresholded output\n' )
__children["IBKeyThreshold"]["__uiPosition"].setValue( imath.V2f( -13.4320326, -24.4755783 ) )
__children["OSLImage"]["in"].setInput( __children["BoxIn"]["out"] )
__children["OSLImage"]["channels"]["channel1"]["value"].setInput( __children["IBKeyThreshold"]["out"]["alpha"] )
__children["OSLImage"]["__uiPosition"].setValue( imath.V2f( 1.89999819, -25.0755787 ) )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["in"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["in"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["in"], 'layout:index', 0 )
__children["BoxIn"]["__in"].setInput( __children["in"] )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
__children["BoxIn"]["__uiPosition"].setValue( imath.V2f( 16.3999977, -16.7435474 ) )
__children["BoxOut"]["in"].setInput( __children["Premultiply"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'plugValueWidget:type', '' )
__children["BoxOut"]["passThrough"].setInput( __children["BoxIn"]["out"] )
__children["BoxOut"]["enabled"].setInput( __children["enabled"] )
__children["BoxOut"]["__uiPosition"].setValue( imath.V2f( 17.6986656, -57.9840927 ) )
__children["out"].setInput( __children["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["out"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["out"], 'noduleLayout:section', 'bottom' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:index', 8 )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:section', 'Node' )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:index', 9 )
Gaffer.Metadata.registerValue( __children["sc"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["sc"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["sc"], 'layout:index', 2 )
Gaffer.Metadata.registerValue( __children["sc"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["sc"], 'preset:red', 0 )
Gaffer.Metadata.registerValue( __children["sc"], 'preset:green', 1 )
Gaffer.Metadata.registerValue( __children["sc"], 'preset:blue', 2 )
Gaffer.Metadata.registerValue( __children["sc"], 'description', 'Choose the dominant chroma screen color.' )
Gaffer.Metadata.registerValue( __children["sc"], 'label', 'screen color' )
Gaffer.Metadata.registerValue( __children["w"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["w"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["w"], 'layout:index', 5 )
Gaffer.Metadata.registerValue( __children["w"], 'label', 'bias' )
Gaffer.Metadata.registerValue( __children["chs"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["chs"], 'label', 'chroma strength' )
Gaffer.Metadata.registerValue( __children["shs"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["shs"], 'label', 'shadow strength' )
__children["Erode"]["in"].setInput( __children["OSLImage"]["out"] )
__children["Erode"]["radius"]["x"].setInput( __children["erode"] )
__children["Erode"]["radius"]["y"].setInput( __children["Erode"]["radius"]["x"] )
__children["Erode"]["__uiPosition"].setValue( imath.V2f( 1.89999819, -33.875576 ) )
__children["CopyChannels"]["in"][0].setInput( __children["BoxIn"]["out"] )
__children["CopyChannels"]["in"][1].setInput( __children["Erode"]["out"] )
__children["CopyChannels"]["channels"].setValue( '[A]' )
__children["CopyChannels"]["__uiPosition"].setValue( imath.V2f( 16.1986656, -42.0396385 ) )
__children["Premultiply"]["in"].setInput( __children["CopyChannels"]["out"] )
__children["Premultiply"]["__uiPosition"].setValue( imath.V2f( 16.1986656, -49.6520615 ) )
Gaffer.Metadata.registerValue( __children["erode"], 'nodule:type', '' )
__children["BoxIn1"]["name"].setValue( 'sc' )
__children["BoxIn1"]["__in"].setInput( __children["sc"] )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'preset:red', 0 )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'preset:green', 1 )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'preset:blue', 2 )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'description', 'Choose the dominant chroma screen color.' )
Gaffer.Metadata.registerValue( __children["BoxIn1"]["__in"], 'label', 'screen color' )
__children["BoxIn2"]["name"].setValue( 'w' )
__children["BoxIn2"]["__in"].setInput( __children["w"] )
Gaffer.Metadata.registerValue( __children["BoxIn2"]["__in"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["BoxIn2"]["__in"], 'label', 'bias' )
__children["BoxIn3"]["name"].setValue( 'chs' )
__children["BoxIn3"]["__in"].setInput( __children["chs"] )
Gaffer.Metadata.registerValue( __children["BoxIn3"]["__in"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["BoxIn3"]["__in"], 'label', 'chroma strength' )
__children["BoxIn4"]["name"].setValue( 'shs' )
__children["BoxIn4"]["__in"].setInput( __children["shs"] )
Gaffer.Metadata.registerValue( __children["BoxIn4"]["__in"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["BoxIn4"]["__in"], 'label', 'shadow strength' )
Gaffer.Metadata.registerValue( parent, 'description', '' )
Gaffer.Metadata.registerValue( parent, 'nodeGadget:color', imath.Color3f( 0.100000001, 0.100000001, 0.100000001 ) )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonRight:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )


del __children

