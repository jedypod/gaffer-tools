import Gaffer
import GafferImage
import GafferOSL
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 4, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 10, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["HCLKeyer"] = GafferOSL.OSLCode( "HCLKeyer" )
parent.addChild( __children["HCLKeyer"] )
__children["HCLKeyer"]["parameters"].addChild( Gaffer.FloatPlug( "h_cn", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["HCLKeyer"]["parameters"].addChild( Gaffer.FloatPlug( "h_w", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["HCLKeyer"]["parameters"].addChild( Gaffer.FloatPlug( "h_fa", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["HCLKeyer"]["parameters"].addChild( Gaffer.IntPlug( "invert", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["HCLKeyer"]["parameters"].addChild( Gaffer.IntPlug( "extractChroma", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["HCLKeyer"]["parameters"].addChild( Gaffer.IntPlug( "premult", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["HCLKeyer"]["parameters"].addChild( Gaffer.SplinefColor3fPlug( "c_spn", defaultValue = Gaffer.SplineDefinitionfColor3f( ( ( 0, imath.Color3f( 0, 0, 0 ) ), ( 1, imath.Color3f( 1, 1, 1 ) )), Gaffer.SplineDefinitionInterpolation( 1 )), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["HCLKeyer"]["parameters"]["c_spn"].clearPoints()
__children["HCLKeyer"]["parameters"]["c_spn"].addChild( Gaffer.ValuePlug( "p0", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["HCLKeyer"]["parameters"]["c_spn"]["p0"].addChild( Gaffer.FloatPlug( "x", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["HCLKeyer"]["parameters"]["c_spn"]["p0"].addChild( Gaffer.Color3fPlug( "y", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["HCLKeyer"]["parameters"]["c_spn"].addChild( Gaffer.ValuePlug( "p2", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["HCLKeyer"]["parameters"]["c_spn"]["p2"].addChild( Gaffer.FloatPlug( "x", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["HCLKeyer"]["parameters"]["c_spn"]["p2"].addChild( Gaffer.Color3fPlug( "y", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["HCLKeyer"]["parameters"]["c_spn"].addChild( Gaffer.ValuePlug( "p3", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["HCLKeyer"]["parameters"]["c_spn"]["p3"].addChild( Gaffer.FloatPlug( "x", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["HCLKeyer"]["parameters"]["c_spn"]["p3"].addChild( Gaffer.Color3fPlug( "y", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["HCLKeyer"]["out"].addChild( Gaffer.Color3fPlug( "out", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["HCLKeyer"]["out"].addChild( Gaffer.FloatPlug( "alpha", direction = Gaffer.Plug.Direction.Out, defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["HCLKeyer"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLImage"] = GafferOSL.OSLImage( "OSLImage" )
parent.addChild( __children["OSLImage"] )
__children["OSLImage"]["channels"].addChild( Gaffer.NameValuePlug( "", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 1, 1, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "channel", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLImage"]["channels"].addChild( Gaffer.NameValuePlug( "A", Gaffer.FloatPlug( "value", defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "channel1", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLImage"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["in"] = GafferImage.ImagePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["in"] )
__children["BoxIn"] = Gaffer.BoxIn( "BoxIn" )
parent.addChild( __children["BoxIn"] )
__children["BoxIn"].setup( GafferImage.ImagePlug( "out", ) )
__children["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOut"] = Gaffer.BoxOut( "BoxOut" )
parent.addChild( __children["BoxOut"] )
__children["BoxOut"].setup( GafferImage.ImagePlug( "in", ) )
__children["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["out"] = GafferImage.ImagePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["out"] )
__children["enabled"] = Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["enabled"] )
__children["h_cn"] = Gaffer.FloatPlug( "h_cn", defaultValue = 4.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["h_cn"] )
__children["h_w"] = Gaffer.FloatPlug( "h_w", defaultValue = 0.5, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["h_w"] )
__children["h_fa"] = Gaffer.FloatPlug( "h_fa", defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["h_fa"] )
__children["extractChroma"] = Gaffer.BoolPlug( "extractChroma", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["extractChroma"] )
__children["Invert"] = Gaffer.BoolPlug( "Invert", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["Invert"] )
__children["premult"] = Gaffer.BoolPlug( "premult", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["premult"] )
__children["chromaRamp"] = Gaffer.SplinefColor3fPlug( "chromaRamp", defaultValue = Gaffer.SplineDefinitionfColor3f( ( ( 0.467422, imath.Color3f( 0, 0, 0 ) ), ( 0.637394, imath.Color3f( 1, 1, 1 ) ), ( 1, imath.Color3f( 1, 1, 1 ) )), Gaffer.SplineDefinitionInterpolation( 0 )), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["chromaRamp"] )
Gaffer.Metadata.registerValue( __children["HCLKeyer"], 'noduleLayout:customGadget:addButtonTop:visible', True )
Gaffer.Metadata.registerValue( __children["HCLKeyer"], 'noduleLayout:customGadget:addButtonBottom:visible', True )
Gaffer.Metadata.registerValue( __children["HCLKeyer"], 'noduleLayout:customGadget:addButtonLeft:visible', True )
Gaffer.Metadata.registerValue( __children["HCLKeyer"], 'noduleLayout:customGadget:addButtonRight:visible', True )
__children["HCLKeyer"]["parameters"]["h_cn"].setInput( __children["h_cn"] )
__children["HCLKeyer"]["parameters"]["h_w"].setInput( __children["h_w"] )
__children["HCLKeyer"]["parameters"]["h_fa"].setInput( __children["h_fa"] )
__children["HCLKeyer"]["parameters"]["invert"].setInput( __children["Invert"] )
__children["HCLKeyer"]["parameters"]["extractChroma"].setInput( __children["extractChroma"] )
__children["HCLKeyer"]["parameters"]["premult"].setInput( __children["premult"] )
__children["HCLKeyer"]["parameters"]["c_spn"].setInput( __children["chromaRamp"] )
__children["HCLKeyer"]["code"].setValue( 'color rgb = inLayer("", 0); // Input RGB\n\nfloat mx = max(rgb.r, max(rgb.g, rgb.b));\n\ncolor rats = rgb/mx;\nfloat mn = min(rats.r, min(rats.g, rats.b));\nfloat C = 1-mn;\nfloat H = rats.r==1?fmod((rats.g-rats.b)/C+6,6):rats.g==1?(rats.b-rats.r)/C+2:rats.b==1?(rats.r-rats.g)/C+4:0;\n\n// Extract Hue\nfloat h_e1 = 2-h_w/2;\nfloat h_e0 = h_e1-h_fa/2;\nfloat h_e2 = 2+h_w/2;\nfloat h_e3 = h_e2+h_fa/2;\nfloat h0 = H-h_cn+2;\nfloat h1 = h0<0?6+h0:fmod(h0,6);\nfloat h = h1<h_e1?clamp((h1-h_e0)/(h_e1-h_e0),0,1):clamp((h1-h_e3)/(h_e2-h_e3),0,1);\n\nfloat c=1;\nif (extractChroma) {\n\t// Extract Chroma (strict distance from achromatic as defined by max(r,g,b) norm)\n\t// Try using a spline for chroma extraction\n\tcolor spn = colorSpline( c_spnPositions, c_spnValues, c_spnBasis, C );\n\tc = spn[0];\n}\n\nalpha = clamp(c*h,0,1);\nif (invert) alpha = 1-alpha;\nif (premult) out = rgb*alpha;\nelse out = rgb;\n' )
__children["HCLKeyer"]["__uiPosition"].setValue( imath.V2f( 0.866635323, -27.6755772 ) )
__children["OSLImage"]["in"].setInput( __children["BoxIn"]["out"] )
__children["OSLImage"]["channels"]["channel"]["value"].setInput( __children["HCLKeyer"]["out"]["out"] )
__children["OSLImage"]["channels"]["channel1"]["value"].setInput( __children["HCLKeyer"]["out"]["alpha"] )
__children["OSLImage"]["__uiPosition"].setValue( imath.V2f( 16.1986656, -28.2755756 ) )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["in"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["in"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["in"], 'layout:index', 0 )
__children["BoxIn"]["__in"].setInput( __children["in"] )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
__children["BoxIn"]["__uiPosition"].setValue( imath.V2f( 16.1986656, -19.625576 ) )
__children["BoxOut"]["in"].setInput( __children["OSLImage"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'plugValueWidget:type', '' )
__children["BoxOut"]["passThrough"].setInput( __children["BoxIn"]["out"] )
__children["BoxOut"]["enabled"].setInput( __children["enabled"] )
__children["BoxOut"]["__uiPosition"].setValue( imath.V2f( 17.6986656, -36.9255753 ) )
__children["out"].setInput( __children["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["out"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["out"], 'noduleLayout:section', 'bottom' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:index', 6 )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:section', 'Node' )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:index', 9 )
Gaffer.Metadata.registerValue( __children["h_cn"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["h_cn"], 'label', 'hue center' )
Gaffer.Metadata.registerValue( __children["h_cn"], 'description', 'The center hue to extract. Hue is a scale from 0 to 6.\n\n  - Red: 0\n  - Yellow: 1\n  - Green: 2\n  - Cyan: 3\n  - Blue: 4\n  - Magenta: 5\n  - Red: 6\n  - etc\n' )
Gaffer.Metadata.registerValue( __children["h_cn"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["h_cn"], 'layout:index', 1 )
Gaffer.Metadata.registerValue( __children["h_w"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["h_w"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["h_w"], 'label', 'hue width' )
Gaffer.Metadata.registerValue( __children["h_w"], 'description', 'width of the hue slice' )
Gaffer.Metadata.registerValue( __children["h_w"], 'layout:index', 2 )
Gaffer.Metadata.registerValue( __children["h_fa"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["h_fa"], 'label', 'hue falloff' )
Gaffer.Metadata.registerValue( __children["h_fa"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["h_fa"], 'layout:index', 3 )
Gaffer.Metadata.registerValue( __children["h_fa"], 'description', 'falloff of the hue slice' )
Gaffer.Metadata.registerValue( __children["extractChroma"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["extractChroma"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["extractChroma"], 'layout:index', 4 )
Gaffer.Metadata.registerValue( __children["extractChroma"], 'label', 'extract chroma' )
Gaffer.Metadata.registerValue( __children["Invert"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["Invert"], 'label', 'invert' )
Gaffer.Metadata.registerValue( __children["Invert"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["Invert"], 'layout:index', 7 )
Gaffer.Metadata.registerValue( __children["premult"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["premult"], 'label', 'premult' )
Gaffer.Metadata.registerValue( __children["premult"], 'description', 'premult rgb by alpha if enabled, otherwise just output the alpha for use downstream' )
Gaffer.Metadata.registerValue( __children["premult"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["premult"], 'layout:index', 8 )
Gaffer.Metadata.registerValue( __children["chromaRamp"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( __children["chromaRamp"], 'description', '' )
Gaffer.Metadata.registerValue( __children["chromaRamp"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["chromaRamp"], 'noduleLayout:visible', True )
Gaffer.Metadata.registerValue( __children["chromaRamp"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["chromaRamp"], 'layout:index', 5 )
Gaffer.Metadata.registerValue( __children["chromaRamp"], 'label', 'chroma ramp' )
Gaffer.Metadata.registerValue( __children["chromaRamp"]["interpolation"], 'noduleLayout:section', 'left' )
Gaffer.Metadata.registerValue( parent, 'description', 'A simple Hue-Chroma keyer.' )
Gaffer.Metadata.registerValue( parent, 'nodeGadget:color', imath.Color3f( 0.100000001, 0.100000001, 0.100000001 ) )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonRight:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )


del __children

