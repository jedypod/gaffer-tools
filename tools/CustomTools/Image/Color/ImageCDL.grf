import Gaffer
import GafferImage
import GafferOSL
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["BoxIn"] = Gaffer.BoxIn( "BoxIn" )
parent.addChild( __children["BoxIn"] )
__children["BoxIn"].setup( GafferImage.ImagePlug( "out", ) )
__children["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["OSLImage"] = GafferOSL.OSLImage( "OSLImage" )
parent.addChild( __children["OSLImage"] )
__children["OSLImage"]["channels"].addChild( Gaffer.NameValuePlug( "", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 1, 1, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "channel", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLImage"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["in"] = GafferImage.ImagePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["in"] )
__children["BoxOut"] = Gaffer.BoxOut( "BoxOut" )
parent.addChild( __children["BoxOut"] )
__children["BoxOut"].setup( GafferImage.ImagePlug( "in", ) )
__children["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["out"] = GafferImage.ImagePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["out"] )
__children["enabled"] = Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["enabled"] )
__children["InLayer"] = GafferOSL.OSLShader( "InLayer" )
parent.addChild( __children["InLayer"] )
__children["InLayer"].loadShader( "ImageProcessing/InLayer" )
__children["InLayer"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["oslCDL"] = Gaffer.Reference( "oslCDL" )
parent.addChild( __children["oslCDL"] )
__children["oslCDL"].load( "oslCDL.grf" )
__children["oslCDL"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["slope"] = Gaffer.Color3fPlug( "slope", defaultValue = imath.Color3f( 1, 1, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["slope"] )
__children["offset"] = Gaffer.Color3fPlug( "offset", defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["offset"] )
__children["power"] = Gaffer.Color3fPlug( "power", defaultValue = imath.Color3f( 1, 1, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["power"] )
__children["saturation"] = Gaffer.FloatPlug( "saturation", defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["saturation"] )
__children["invert"] = Gaffer.BoolPlug( "invert", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["invert"] )
__children["BoxIn"]["__in"].setInput( __children["in"] )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["BoxIn"]["out"], 'noduleLayout:section', 'bottom' )
__children["BoxIn"]["__uiPosition"].setValue( imath.V2f( 1, 14.9000006 ) )
Gaffer.Metadata.registerValue( __children["OSLImage"], 'noduleLayout:customGadget:addButtonTop:visible', True )
Gaffer.Metadata.registerValue( __children["OSLImage"], 'noduleLayout:customGadget:addButtonBottom:visible', True )
Gaffer.Metadata.registerValue( __children["OSLImage"], 'noduleLayout:customGadget:addButtonLeft:visible', True )
Gaffer.Metadata.registerValue( __children["OSLImage"], 'noduleLayout:customGadget:addButtonRight:visible', True )
__children["OSLImage"]["in"].setInput( __children["BoxIn"]["out"] )
__children["OSLImage"]["channels"]["channel"]["value"].setInput( __children["oslCDL"]["out"] )
__children["OSLImage"]["__uiPosition"].setValue( imath.V2f( 0.99999994, 6.40000105 ) )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["in"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["in"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["in"], 'layout:index', 0 )
__children["BoxOut"]["in"].setInput( __children["OSLImage"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
__children["BoxOut"]["passThrough"].setInput( __children["BoxIn"]["out"] )
__children["BoxOut"]["enabled"].setInput( __children["enabled"] )
__children["BoxOut"]["__uiPosition"].setValue( imath.V2f( 2.49912643, -1.76406145 ) )
__children["out"].setInput( __children["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["out"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:index', 1 )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:section', 'Node' )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:index', 3 )
__children["InLayer"]["__uiPosition"].setValue( imath.V2f( -19.2293968, 15.8999977 ) )
Gaffer.Metadata.registerValue( __children["oslCDL"], 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( __children["oslCDL"], 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( __children["oslCDL"], 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( __children["oslCDL"], 'noduleLayout:customGadget:addButtonRight:visible', False )
Gaffer.Metadata.registerValue( __children["oslCDL"], 'documentation:url', '' )
Gaffer.Metadata.registerValue( __children["oslCDL"], 'description', '' )
__children["oslCDL"]["slope"].setInput( __children["slope"] )
__children["oslCDL"]["offset"].setInput( __children["offset"] )
__children["oslCDL"]["power"].setInput( __children["power"] )
__children["oslCDL"]["saturation"].setInput( __children["saturation"] )
__children["oslCDL"]["invert"].setInput( __children["invert"] )
__children["oslCDL"]["in"].setInput( __children["InLayer"]["out"]["layerColor"] )
__children["oslCDL"]["__uiPosition"].setValue( imath.V2f( -10.2381315, 11.067976 ) )
Gaffer.Metadata.registerValue( __children["slope"], 'nodule:color', imath.Color3f( 0.689999998, 0.537800014, 0.228300005 ) )
Gaffer.Metadata.registerValue( __children["slope"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["slope"], 'label', 'slope' )
Gaffer.Metadata.registerValue( __children["slope"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["slope"], 'layout:index', 2 )
Gaffer.Metadata.registerValue( __children["slope"]["r"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["slope"]["g"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["slope"]["b"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["offset"], 'nodule:color', imath.Color3f( 0.689999998, 0.537800014, 0.228300005 ) )
Gaffer.Metadata.registerValue( __children["offset"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["offset"], 'label', 'offset' )
Gaffer.Metadata.registerValue( __children["offset"]["r"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["offset"]["g"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["offset"]["b"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["power"], 'nodule:color', imath.Color3f( 0.689999998, 0.537800014, 0.228300005 ) )
Gaffer.Metadata.registerValue( __children["power"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["power"], 'label', 'power' )
Gaffer.Metadata.registerValue( __children["power"]["r"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["power"]["g"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["power"]["b"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["saturation"], 'nodule:color', imath.Color3f( 0.246700004, 0.376199991, 0.469999999 ) )
Gaffer.Metadata.registerValue( __children["saturation"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["saturation"], 'label', 'saturation' )
Gaffer.Metadata.registerValue( __children["invert"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["invert"], 'label', 'invert' )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonRight:visible', False )
Gaffer.Metadata.registerValue( parent, 'documentation:url', '' )
Gaffer.Metadata.registerValue( parent, 'description', '' )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )


del __children

