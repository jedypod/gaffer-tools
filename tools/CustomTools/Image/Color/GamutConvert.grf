import Gaffer
import GafferImage
import GafferOSL
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["OSLImage"] = GafferOSL.OSLImage( "OSLImage" )
parent.addChild( __children["OSLImage"] )
__children["OSLImage"]["channels"].addChild( Gaffer.NameValuePlug( "", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 1, 1, 1 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ), True, "channel", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLImage"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["in"] = GafferImage.ImagePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["in"] )
__children["ColorMatrix"] = GafferOSL.OSLCode( "ColorMatrix" )
parent.addChild( __children["ColorMatrix"] )
__children["ColorMatrix"]["parameters"].addChild( Gaffer.V3fPlug( "m0", defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, interpretation = IECore.GeometricData.Interpretation.Vector ) )
__children["ColorMatrix"]["parameters"].addChild( Gaffer.V3fPlug( "m1", defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, interpretation = IECore.GeometricData.Interpretation.Vector ) )
__children["ColorMatrix"]["parameters"].addChild( Gaffer.V3fPlug( "m2", defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, interpretation = IECore.GeometricData.Interpretation.Vector ) )
__children["ColorMatrix"]["out"].addChild( Gaffer.Color3fPlug( "out", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ColorMatrix"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxIn"] = Gaffer.BoxIn( "BoxIn" )
parent.addChild( __children["BoxIn"] )
__children["BoxIn"].setup( GafferImage.ImagePlug( "out", ) )
__children["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOut"] = Gaffer.BoxOut( "BoxOut" )
parent.addChild( __children["BoxOut"] )
__children["BoxOut"].setup( GafferImage.ImagePlug( "in", ) )
__children["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["out"] = GafferImage.ImagePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["out"] )
__children["enabled"] = Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["enabled"] )
__children["Expression"] = Gaffer.Expression( "Expression" )
parent.addChild( __children["Expression"] )
__children["Expression"]["__in"].addChild( Gaffer.StringPlug( "p0", defaultValue = 'CAT02', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__in"].addChild( Gaffer.BoolPlug( "p1", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__in"].addChild( Gaffer.StringPlug( "p2", defaultValue = 'XYZ', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__in"].addChild( Gaffer.StringPlug( "p3", defaultValue = 'XYZ', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__in"].addChild( Gaffer.BoolPlug( "p4", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__out"].addChild( Gaffer.V3fPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, interpretation = IECore.GeometricData.Interpretation.Vector ) )
__children["Expression"]["__out"].addChild( Gaffer.V3fPlug( "p1", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, interpretation = IECore.GeometricData.Interpretation.Vector ) )
__children["Expression"]["__out"].addChild( Gaffer.V3fPlug( "p2", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, interpretation = IECore.GeometricData.Interpretation.Vector ) )
__children["Expression"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["gamutIn"] = Gaffer.StringPlug( "gamutIn", defaultValue = 'XYZ D65', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["gamutIn"] )
__children["gamutOut"] = Gaffer.StringPlug( "gamutOut", defaultValue = 'XYZ D65', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["gamutOut"] )
__children["CATMethod"] = Gaffer.StringPlug( "CATMethod", defaultValue = 'CAT02', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["CATMethod"] )
__children["invert"] = Gaffer.BoolPlug( "invert", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["invert"] )
__children["doChromaticAdaptation"] = Gaffer.BoolPlug( "doChromaticAdaptation", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["doChromaticAdaptation"] )
__children["m0"] = Gaffer.V3fPlug( "m0", defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["m0"] )
__children["m1"] = Gaffer.V3fPlug( "m1", defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["m1"] )
__children["m2"] = Gaffer.V3fPlug( "m2", defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["m2"] )
Gaffer.Metadata.registerValue( __children["OSLImage"], 'noduleLayout:customGadget:addButtonTop:visible', True )
Gaffer.Metadata.registerValue( __children["OSLImage"], 'noduleLayout:customGadget:addButtonBottom:visible', True )
Gaffer.Metadata.registerValue( __children["OSLImage"], 'noduleLayout:customGadget:addButtonLeft:visible', True )
Gaffer.Metadata.registerValue( __children["OSLImage"], 'noduleLayout:customGadget:addButtonRight:visible', True )
Gaffer.Metadata.registerValue( __children["OSLImage"]["user"], 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( __children["OSLImage"]["user"], 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )
__children["OSLImage"]["in"].setInput( __children["BoxIn"]["out"] )
__children["OSLImage"]["channels"]["channel"]["value"].setInput( __children["ColorMatrix"]["out"]["out"] )
__children["OSLImage"]["__uiPosition"].setValue( imath.V2f( 1.66401052, 9.34525871 ) )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["in"], 'noduleLayout:spacing', 2.0 )
Gaffer.Metadata.registerValue( __children["in"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["in"], 'layout:index', 0 )
Gaffer.Metadata.registerValue( __children["ColorMatrix"], 'noduleLayout:customGadget:addButtonTop:visible', True )
Gaffer.Metadata.registerValue( __children["ColorMatrix"], 'noduleLayout:customGadget:addButtonBottom:visible', True )
Gaffer.Metadata.registerValue( __children["ColorMatrix"], 'noduleLayout:customGadget:addButtonLeft:visible', True )
Gaffer.Metadata.registerValue( __children["ColorMatrix"], 'noduleLayout:customGadget:addButtonRight:visible', True )
__children["ColorMatrix"]["parameters"]["m0"].setInput( __children["Expression"]["__out"]["p0"] )
__children["ColorMatrix"]["parameters"]["m1"].setInput( __children["Expression"]["__out"]["p1"] )
__children["ColorMatrix"]["parameters"]["m2"].setInput( __children["Expression"]["__out"]["p2"] )
__children["ColorMatrix"]["code"].setValue( 'color c = inLayer("", 0);\nout.r = dot(m0, c);\nout.g = dot(m1, c);\nout.b = dot(m2, c);' )
__children["ColorMatrix"]["__uiPosition"].setValue( imath.V2f( -12.5898962, 9.94525909 ) )
__children["BoxIn"]["__in"].setInput( __children["in"] )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
__children["BoxIn"]["__uiPosition"].setValue( imath.V2f( 1.66401052, 20.1632633 ) )
__children["BoxOut"]["in"].setInput( __children["OSLImage"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
__children["BoxOut"]["passThrough"].setInput( __children["BoxIn"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["passThrough"], 'noduleLayout:section', 'top' )
__children["BoxOut"]["enabled"].setInput( __children["enabled"] )
__children["BoxOut"]["__uiPosition"].setValue( imath.V2f( 3.164011, -0.566205263 ) )
__children["out"].setInput( __children["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["out"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["out"], 'noduleLayout:section', 'bottom' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:index', 1 )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:section', 'Node' )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:index', 10 )
Gaffer.Metadata.registerValue( __children["Expression"], 'noduleLayout:customGadget:addButtonTop:visible', True )
Gaffer.Metadata.registerValue( __children["Expression"], 'noduleLayout:customGadget:addButtonBottom:visible', True )
Gaffer.Metadata.registerValue( __children["Expression"], 'noduleLayout:customGadget:addButtonLeft:visible', True )
Gaffer.Metadata.registerValue( __children["Expression"], 'noduleLayout:customGadget:addButtonRight:visible', True )
__children["Expression"]["__in"]["p0"].setInput( __children["CATMethod"] )
__children["Expression"]["__in"]["p1"].setInput( __children["doChromaticAdaptation"] )
__children["Expression"]["__in"]["p2"].setInput( __children["gamutIn"] )
__children["Expression"]["__in"]["p3"].setInput( __children["gamutOut"] )
__children["Expression"]["__in"]["p4"].setInput( __children["invert"] )
__children["Expression"]["__uiPosition"].setValue( imath.V2f( -19.4106598, 16.4850292 ) )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'description', '' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'layout:index', 2 )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'preset:XYZ D65', 'XYZ D65' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'preset:ACES 2065-1', 'ACES 2065-1' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'preset:ACEScg', 'ACEScg' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'preset:Filmlight E-Gamut', 'Filmlight E-Gamut' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'preset:DaVinci Wide Gamut', 'DaVinci Wide Gamut' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'preset:Rec709', 'Rec709' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'preset:Rec2020', 'Rec2020' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'preset:P3D60', 'P3D60' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'preset:P3D65', 'P3D65' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'preset:P3DCI', 'P3DCI' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'preset:Arri Wide Gamut 3', 'Arri Wide Gamut 3' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'preset:Arri Wide Gamut 4', 'Arri Wide Gamut 4' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'preset:RED Wide Gamut RGB', 'RED Wide Gamut RGB' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'preset:Canon Cinema Gamut', 'Canon Cinema Gamut' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'preset:Sony SGamut3', 'Sony SGamut3' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'preset:Sony SGamut3.Cine', 'Sony SGamut3.Cine' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'preset:Panasonic V-Gamut', 'Panasonic V-Gamut' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'preset:DJI D-Gamut', 'DJI D-Gamut' )
Gaffer.Metadata.registerValue( __children["gamutIn"], 'preset:Blackmagic Wide Gamut', 'Blackmagic Wide Gamut' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'layout:index', 3 )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'preset:XYZ D65', 'XYZ D65' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'preset:ACES 2065-1', 'ACES 2065-1' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'preset:ACEScg', 'ACEScg' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'preset:Filmlight E-Gamut', 'Filmlight E-Gamut' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'preset:DaVinci Wide Gamut', 'DaVinci Wide Gamut' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'preset:Rec709', 'Rec709' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'preset:Rec2020', 'Rec2020' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'preset:P3D60', 'P3D60' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'preset:P3D65', 'P3D65' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'preset:P3DCI', 'P3DCI' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'preset:Arri Wide Gamut 3', 'Arri Wide Gamut 3' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'preset:Arri Wide Gamut 4', 'Arri Wide Gamut 4' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'preset:RED Wide Gamut RGB', 'RED Wide Gamut RGB' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'preset:Canon Cinema Gamut', 'Canon Cinema Gamut' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'preset:Sony SGamut3', 'Sony SGamut3' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'preset:Sony SGamut3.Cine', 'Sony SGamut3.Cine' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'preset:Panasonic V-Gamut', 'Panasonic V-Gamut' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'preset:DJI D-Gamut', 'DJI D-Gamut' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'preset:Blackmagic Wide Gamut', 'Blackmagic Wide Gamut' )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'presetsPlugValueWidget:allowCustom', False )
Gaffer.Metadata.registerValue( __children["gamutOut"], 'divider', False )
Gaffer.Metadata.registerValue( __children["CATMethod"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["CATMethod"], 'plugValueWidget:type', 'GafferUI.PresetsPlugValueWidget' )
Gaffer.Metadata.registerValue( __children["CATMethod"], 'preset:None', 'None' )
Gaffer.Metadata.registerValue( __children["CATMethod"], 'preset:Bradford', 'Bradford' )
Gaffer.Metadata.registerValue( __children["CATMethod"], 'preset:CAT02', 'CAT02' )
Gaffer.Metadata.registerValue( __children["CATMethod"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["CATMethod"], 'layout:index', 6 )
Gaffer.Metadata.registerValue( __children["CATMethod"], 'divider', True )
Gaffer.Metadata.registerValue( __children["invert"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["invert"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["invert"], 'layout:index', 4 )
Gaffer.Metadata.registerValue( __children["invert"], 'divider', True )
Gaffer.Metadata.registerValue( __children["doChromaticAdaptation"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["doChromaticAdaptation"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["doChromaticAdaptation"], 'layout:index', 5 )
__children["m0"].setInput( __children["ColorMatrix"]["parameters"]["m0"] )
Gaffer.Metadata.registerValue( __children["m0"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["m0"], 'layout:section', 'Settings.matrix' )
Gaffer.Metadata.registerValue( __children["m0"], 'layout:index', 7 )
Gaffer.Metadata.registerValue( __children["m0"], 'label', 'm0' )
__children["m1"].setInput( __children["ColorMatrix"]["parameters"]["m1"] )
Gaffer.Metadata.registerValue( __children["m1"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["m1"], 'layout:section', 'Settings.matrix' )
Gaffer.Metadata.registerValue( __children["m1"], 'layout:index', 8 )
Gaffer.Metadata.registerValue( __children["m1"], 'label', 'm1' )
__children["m2"].setInput( __children["ColorMatrix"]["parameters"]["m2"] )
Gaffer.Metadata.registerValue( __children["m2"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["m2"], 'layout:section', 'Settings.matrix' )
Gaffer.Metadata.registerValue( __children["m2"], 'layout:index', 9 )
Gaffer.Metadata.registerValue( __children["m2"], 'label', 'm2' )
__children["Expression"]["__engine"].setValue( 'python' )
__children["Expression"]["__expression"].setValue( 'from imath import *\n\n# Multiply M33d m and vec3 v\ndef vdot(m, v):\n\treturn V3d(\n\t\tm[0][0]*v[0] + m[0][1]*v[1] + m[0][2]*v[2],\n\t\tm[1][0]*v[0] + m[1][1]*v[1] + m[1][2]*v[2],\n\t\tm[2][0]*v[0] + m[2][1]*v[1] + m[2][2]*v[2])\n\ndef npm(ch):\n\t\'\'\' Calculate the Normalized Primaries Matrix for the specified chromaticities\n\t\t\tAdapted from RP 177:1993 \n\t\t\tSMPTE Recommended Practice - Derivation of Basic Television Color Equations\n\t\t\thttp://doi.org/10.5594/S9781614821915\n\t\t\thttps://mega.nz/file/frAnCIYK#CNRW5Q99G-w_QZtv5ey_0AkRWNrQVh7bM70kVwv42NQ\n\t\'\'\'\n\tdef Y(v):\n\t\treturn 1.0 - v.x - v.y\n\tc = [V2d(ch[0], ch[1]), V2d(ch[2], ch[3]), V2d(ch[4], ch[5]), V2d(ch[6], ch[7])]\n\tP = M33d(c[0].x, c[0].y, Y(c[0]), c[1].x, c[1].y, Y(c[1]), c[2].x, c[2].y, Y(c[2])).transpose()\n\tW = V3d(c[3].x / c[3].y, 1.0, Y(c[3]) / c[3].y)\n\tC = vdot(P.inverse(), W)\n\tC = M33d(\tC.x, 0.0, 0.0,\n\t\t\t\t0.0, C.y, 0.0,\n\t\t\t\t0.0, 0.0, C.z)\n\treturn P * C\n\n\t\ndef cat(ws, wd, method=\'CAT02\'):\n\t\'\'\' Calculate a von Kries style chromatic adaptation transform matrix\n\t\t\tSource: Mark D. Fairchild - 2013 - Color Appearance Models Third Edition p. 181-186\n\t\t\tSource: Bruce Lindbloom - Chromatic Adaptation - http://www.brucelindbloom.com/index.html?Eqn_ChromAdapt.html\n\t\'\'\' \n\tm = M33d()\n\tif ws == wd: # src and dst are equal, nothing to do\n\t\treturn m\n\tws = V2d(ws[0], ws[1])\n\twd = V2d(wd[0], wd[1])\n\n\tif method == \'Bradford\':\n\t\tmcat = M33d(0.8951, 0.2664, -0.1614,\n\t\t\t\t\t\t-0.7502, 1.7135, 0.0367,\n\t\t\t\t\t\t0.0389, -0.0685, 1.0296)\n\telif method == \'CAT02\':\n\t\tmcat = M33d(0.7328, 0.4296, -0.1624,\n\t\t\t\t\t\t-0.7036, 1.6975, 0.0061,\n\t\t\t\t\t\t0.003, 0.0136, 0.9834)\n\telse:\n\t\tmcat = M33d()\n\t\t\n\tdef xy_to_XYZ(c):\n\t\treturn V3d(c.x/c.y, 1.0, (1-c.x-c.y)/c.y)  \n\n\tsXYZ = xy_to_XYZ(ws)\n\tdXYZ = xy_to_XYZ(wd)\n\t\n\ts_cone = vdot(mcat, sXYZ)\n\td_cone = vdot(mcat, dXYZ)\n\tcone = d_cone / s_cone\n\tsmat = M33d(cone.x, 0.0, 0.0,\n\t\t\t\t0.0, cone.y, 0.0,\n\t\t\t\t0.0, 0.0, cone.z)\n\tnmtx = mcat.inverse() * smat\n\treturn nmtx * mcat\n\n\ngamuts = {\n  \'ACES 2065-1\': [0.7347, 0.2653, 0.0, 1.0, 0.0001, -0.077, 0.32168, 0.33767],\n  \'ACEScg\': [0.713, 0.293, 0.165, 0.83, 0.128, 0.044, 0.32168, 0.33767],\n  \'Filmlight E-Gamut\': [0.8, 0.3177, 0.18, 0.9, 0.065, -0.0805, 0.3127, 0.329],\n  \'DaVinci Wide Gamut\': [0.8, 0.313, 0.1682, 0.9877, 0.079, -0.1155, 0.3127, 0.329],\n  \'Rec709\': [0.64, 0.33, 0.3, 0.6, 0.15, 0.06, 0.3127, 0.329],\n  \'Rec2020\': [0.708, 0.292, 0.17, 0.797, 0.131, 0.046, 0.3127, 0.329],\n  \'P3D60\': [0.68, 0.32, 0.265, 0.69, 0.15, 0.06, 0.32168, 0.33767],\n  \'P3D65\': [0.68, 0.32, 0.265, 0.69, 0.15, 0.06, 0.3127, 0.329],\n  \'P3DCI\': [0.68, 0.32, 0.265, 0.69, 0.15, 0.06, 0.314, 0.351],\n  \'Arri Wide Gamut 3\': [0.684, 0.313, 0.221, 0.848, 0.0861, -0.102, 0.3127, 0.329],\n  \'Arri Wide Gamut 4\': [0.7347, 0.2653, 0.1424, 0.8576, 0.0991, -0.0308, 0.3127, 0.329],\n  \'RED Wide Gamut RGB\': [0.780308, 0.304253, 0.121595, 1.493994, 0.095612, -0.084589, 0.3127, 0.329],\n  \'Canon Cinema Gamut\': [0.74, 0.27, 0.17, 1.14, 0.08, -0.1, 0.3127, 0.329],\n  \'Sony SGamut3\': [0.73, 0.28, 0.14, 0.855, 0.1, -0.05, 0.3127, 0.329],\n  \'Sony SGamut3.Cine\': [0.766, 0.275, 0.225, 0.8, 0.089, -0.087, 0.3127, 0.329],\n  \'Panasonic V-Gamut\': [0.73, 0.28, 0.165, 0.84, 0.1, -0.03, 0.3127, 0.329],\n  \'DJI D-Gamut\': [0.71, 0.31, 0.21, 0.88, 0.09, -0.08, 0.3127, 0.329],\n  \'Blackmagic Wide Gamut\': [0.7177215, 0.3171181, 0.228041, 0.861569, 0.1005841, -0.0820452, 0.3127, 0.329],\n  \'XYZ E\': [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0/3.0, 1.0/3.0],\n  \'XYZ D65\': [1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.3127, 0.329],\n}\n\n\n# input gamut chromaticities\nsrc_ch = gamuts.get(parent["__in"]["p2"])\n\n# output chromaticities\ndst_ch = gamuts.get(parent["__in"]["p3"])\n\n# enable CAT transform\ndoCAT = parent["__in"]["p1"]\n\n# Get CAT method\nCATMethod = parent["__in"]["p0"]\n\nsrc_rgbToXYZ = M33d() if "XYZ" in parent["__in"]["p2"] else npm(src_ch)\ndst_rgbToXYZ = M33d() if "XYZ" in parent["__in"]["p3"] else npm(dst_ch)\n\nif doCAT:\n\tCAT_mtx = cat(src_ch[-2:], dst_ch[-2:], method=CATMethod)\n\tsrc_rgbToXYZ = CAT_mtx * src_rgbToXYZ\n\nm = dst_rgbToXYZ.inverse() * src_rgbToXYZ\n\nif parent["__in"]["p4"]:\n\tm.invert()\n\nparent["__out"]["p0"] = V3d(m[0][0], m[0][1], m[0][2])\nparent["__out"]["p1"] = V3d(m[1][0], m[1][1], m[1][2])\nparent["__out"]["p2"] = V3d(m[2][0], m[2][1], m[2][2])\n\n' )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonRight:visible', False )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'description', '' )


del __children

