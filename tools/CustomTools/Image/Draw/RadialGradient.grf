import Gaffer
import GafferImage
import GafferOSL
import IECore
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["BoxOut"] = Gaffer.BoxOut( "BoxOut" )
parent.addChild( __children["BoxOut"] )
__children["BoxOut"].setup( GafferImage.ImagePlug( "in", ) )
__children["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["out"] = GafferImage.ImagePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["out"] )
__children["enabled"] = Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["enabled"] )
__children["OSLImage"] = GafferOSL.OSLImage( "OSLImage" )
parent.addChild( __children["OSLImage"] )
__children["OSLImage"]["channels"].addChild( Gaffer.NameValuePlug( "", Gaffer.Color3fPlug( "value", defaultValue = imath.Color3f( 1, 1, 1 ), ), True, "channel", Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic ) )
__children["OSLImage"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["format"] = Gaffer.V2iPlug( "format", defaultValue = imath.V2i( 2048, 1024 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["format"] )
__children["Expression"] = Gaffer.Expression( "Expression" )
parent.addChild( __children["Expression"] )
__children["Expression"]["__in"].addChild( Gaffer.IntPlug( "p0", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__in"].addChild( Gaffer.IntPlug( "p1", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__out"].addChild( Gaffer.IntPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = -2147483648, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"]["__out"].addChild( Gaffer.IntPlug( "p1", direction = Gaffer.Plug.Direction.Out, defaultValue = -2147483648, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["code"] = GafferOSL.OSLCode( "code" )
parent.addChild( __children["code"] )
__children["code"]["parameters"].addChild( Gaffer.V3fPlug( "p", defaultValue = imath.V3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, interpretation = IECore.GeometricData.Interpretation.Vector ) )
__children["code"]["parameters"].addChild( Gaffer.FloatPlug( "ar", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["code"]["parameters"].addChild( Gaffer.FloatPlug( "size", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["code"]["parameters"].addChild( Gaffer.IntPlug( "falloff", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["code"]["parameters"].addChild( Gaffer.IntPlug( "invert", defaultValue = 0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["code"]["out"].addChild( Gaffer.Color3fPlug( "out", direction = Gaffer.Plug.Direction.Out, defaultValue = imath.Color3f( 0, 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["code"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["size"] = Gaffer.FloatPlug( "size", defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["size"] )
__children["smoothstep"] = Gaffer.BoolPlug( "smoothstep", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["smoothstep"] )
__children["center"] = Gaffer.V2fPlug( "center", defaultValue = imath.V2f( 0.5, 0.5 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["center"] )
__children["aspect"] = Gaffer.FloatPlug( "aspect", defaultValue = 1.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["aspect"] )
__children["Expression1"] = Gaffer.Expression( "Expression1" )
parent.addChild( __children["Expression1"] )
__children["Expression1"]["__in"].addChild( Gaffer.IntPlug( "p0", defaultValue = 1024, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression1"]["__in"].addChild( Gaffer.IntPlug( "p1", defaultValue = 2048, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression1"]["__in"].addChild( Gaffer.FloatPlug( "p2", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression1"]["__in"].addChild( Gaffer.FloatPlug( "p3", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression1"]["__in"].addChild( Gaffer.FloatPlug( "p4", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression1"]["__in"].addChild( Gaffer.FloatPlug( "p5", defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression1"]["__out"].addChild( Gaffer.FloatPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression1"]["__out"].addChild( Gaffer.FloatPlug( "p1", direction = Gaffer.Plug.Direction.Out, defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression1"]["__out"].addChild( Gaffer.FloatPlug( "p2", direction = Gaffer.Plug.Direction.Out, defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression1"]["__out"].addChild( Gaffer.FloatPlug( "p3", direction = Gaffer.Plug.Direction.Out, defaultValue = 0.0, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression1"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["invert"] = Gaffer.BoolPlug( "invert", defaultValue = False, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["invert"] )
__children["BoxOut"]["in"].setInput( __children["OSLImage"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["in"], 'noduleLayout:section', 'top' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'noduleLayout:section', 'bottom' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["passThrough"], 'noduleLayout:section', 'top' )
__children["BoxOut"]["enabled"].setInput( __children["enabled"] )
__children["BoxOut"]["__uiPosition"].setValue( imath.V2f( -1.49999988, -28.83218 ) )
__children["out"].setInput( __children["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["out"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["out"], 'noduleLayout:section', 'bottom' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["out"], 'layout:index', 0 )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:section', 'Node' )
Gaffer.Metadata.registerValue( __children["enabled"], 'layout:index', 7 )
Gaffer.Metadata.registerValue( __children["OSLImage"], 'noduleLayout:customGadget:addButtonTop:visible', True )
Gaffer.Metadata.registerValue( __children["OSLImage"], 'noduleLayout:customGadget:addButtonBottom:visible', True )
Gaffer.Metadata.registerValue( __children["OSLImage"], 'noduleLayout:customGadget:addButtonLeft:visible', True )
Gaffer.Metadata.registerValue( __children["OSLImage"], 'noduleLayout:customGadget:addButtonRight:visible', True )
__children["OSLImage"]["defaultFormat"]["displayWindow"]["min"].setValue( imath.V2i( 0, 0 ) )
Gaffer.Metadata.registerValue( __children["OSLImage"]["defaultFormat"], 'formatPlugValueWidget:mode', 'custom' )
__children["OSLImage"]["defaultFormat"]["displayWindow"]["max"].setInput( __children["Expression"]["__out"] )
__children["OSLImage"]["channels"]["channel"]["value"].setInput( __children["code"]["out"]["out"] )
__children["OSLImage"]["__uiPosition"].setValue( imath.V2f( -3, -20.5001488 ) )
Gaffer.Metadata.registerValue( __children["format"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["format"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["format"], 'layout:index', 1 )
Gaffer.Metadata.registerValue( __children["format"], 'description', 'Specify the size of the output. Height = 0 means square.' )
Gaffer.Metadata.registerValue( __children["format"], 'label', 'format' )
__children["Expression"]["__in"]["p0"].setInput( __children["format"]["x"] )
__children["Expression"]["__in"]["p1"].setInput( __children["format"]["y"] )
__children["Expression"]["__uiPosition"].setValue( imath.V2f( 1.62688255, -19.4848537 ) )
Gaffer.Metadata.registerValue( __children["code"], 'noduleLayout:customGadget:addButtonTop:visible', True )
Gaffer.Metadata.registerValue( __children["code"], 'noduleLayout:customGadget:addButtonBottom:visible', True )
Gaffer.Metadata.registerValue( __children["code"], 'noduleLayout:customGadget:addButtonLeft:visible', True )
Gaffer.Metadata.registerValue( __children["code"], 'noduleLayout:customGadget:addButtonRight:visible', True )
__children["code"]["parameters"]["p"]["x"].setInput( __children["Expression1"]["__out"]["p2"] )
__children["code"]["parameters"]["p"]["y"].setInput( __children["Expression1"]["__out"]["p3"] )
__children["code"]["parameters"]["ar"].setInput( __children["Expression1"]["__out"]["p0"] )
__children["code"]["parameters"]["size"].setInput( __children["Expression1"]["__out"]["p1"] )
__children["code"]["parameters"]["falloff"].setInput( __children["smoothstep"] )
__children["code"]["parameters"]["invert"].setInput( __children["invert"] )
__children["code"]["code"].setValue( 'float d = min(1,hypot(u-p.x, (v-p.y)*ar)*2/size);\nif (!invert) d = 1-d;\nif (falloff == 0) // Linear\n\tout = d;\nelse if (falloff == 1) // SmoothStep\n\tout = d*d*(3-2*d);' )
__children["code"]["__uiPosition"].setValue( imath.V2f( -15.2912598, -19.9001484 ) )
Gaffer.Metadata.registerValue( __children["size"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["size"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["size"], 'layout:index', 3 )
Gaffer.Metadata.registerValue( __children["size"], 'label', 'size' )
Gaffer.Metadata.registerValue( __children["size"], 'description', 'size of gradient in percentage of framesize' )
Gaffer.Metadata.registerValue( __children["smoothstep"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["smoothstep"], 'label', 'smoothstep' )
Gaffer.Metadata.registerValue( __children["smoothstep"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["smoothstep"], 'layout:index', 5 )
Gaffer.Metadata.registerValue( __children["smoothstep"], 'description', 'smoothstep the gradient, otherwise linear' )
Gaffer.Metadata.registerValue( __children["center"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["center"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["center"], 'layout:index', 2 )
Gaffer.Metadata.registerValue( __children["center"], 'label', 'center' )
Gaffer.Metadata.registerValue( __children["center"], 'description', 'center of gradient in percentage of frame size' )
Gaffer.Metadata.registerValue( __children["aspect"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["aspect"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["aspect"], 'layout:index', 4 )
Gaffer.Metadata.registerValue( __children["aspect"], 'label', 'aspect ratio' )
Gaffer.Metadata.registerValue( __children["aspect"], 'description', '' )
Gaffer.Metadata.registerValue( __children["Expression1"], 'noduleLayout:customGadget:addButtonTop:visible', True )
Gaffer.Metadata.registerValue( __children["Expression1"], 'noduleLayout:customGadget:addButtonBottom:visible', True )
Gaffer.Metadata.registerValue( __children["Expression1"], 'noduleLayout:customGadget:addButtonLeft:visible', True )
Gaffer.Metadata.registerValue( __children["Expression1"], 'noduleLayout:customGadget:addButtonRight:visible', True )
__children["Expression1"]["__in"]["p0"].setInput( __children["format"]["y"] )
__children["Expression1"]["__in"]["p1"].setInput( __children["format"]["x"] )
__children["Expression1"]["__in"]["p2"].setInput( __children["aspect"] )
__children["Expression1"]["__in"]["p3"].setInput( __children["size"] )
__children["Expression1"]["__in"]["p4"].setInput( __children["center"]["x"] )
__children["Expression1"]["__in"]["p5"].setInput( __children["center"]["y"] )
__children["Expression1"]["__uiPosition"].setValue( imath.V2f( -20.4820614, -14.7992792 ) )
Gaffer.Metadata.registerValue( __children["invert"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["invert"], 'label', 'invert' )
Gaffer.Metadata.registerValue( __children["invert"], 'layout:section', 'Settings' )
Gaffer.Metadata.registerValue( __children["invert"], 'layout:index', 6 )
__children["Expression"]["__engine"].setValue( 'OSL' )
__children["Expression"]["__expression"].setValue( 'int xSize = parent.__in.p0;\nparent.__out.p0 = xSize;\nint ySize = parent.__in.p1;\nif (ySize == 0) ySize = xSize;\nparent.__out.p1 = ySize;' )
__children["Expression1"]["__engine"].setValue( 'OSL' )
__children["Expression1"]["__expression"].setValue( 'float ysize = parent.__in.p0;\nfloat xsize = parent.__in.p1;\nysize = ysize == 0 ? xsize : ysize;\nfloat ar = ysize/xsize*parent.__in.p2;\nparent.__out.p0 = ar;\n\nparent.__out.p1 = parent.__in.p3*ar;\n\nparent.__out.p2 = parent.__in.p4;\nparent.__out.p3 = parent.__in.p5;' )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySections', IECore.StringVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'uiEditor:emptySectionIndices', IECore.IntVectorData( [  ] ) )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonRight:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( parent, 'description', 'Generate a radial gradient of specified size at specified position' )
Gaffer.Metadata.registerValue( parent, 'documentation:url', '' )


del __children

