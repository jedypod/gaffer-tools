import Gaffer
import GafferImage
import imath

Gaffer.Metadata.registerValue( parent, "serialiser:milestoneVersion", 1, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:majorVersion", 3, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:minorVersion", 0, persistent=False )
Gaffer.Metadata.registerValue( parent, "serialiser:patchVersion", 0, persistent=False )

__children = {}

__children["ShuffleLayer"] = GafferImage.Shuffle( "ShuffleLayer" )
parent.addChild( __children["ShuffleLayer"] )
__children["ShuffleLayer"]["user"].addChild( Gaffer.StringPlug( "inLayer", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ShuffleLayer"]["user"].addChild( Gaffer.StringPlug( "outLayer", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ShuffleLayer"]["channels"].addChild( GafferImage.Shuffle.ChannelPlug( "channel", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ShuffleLayer"]["channels"].addChild( GafferImage.Shuffle.ChannelPlug( "channel1", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ShuffleLayer"]["channels"].addChild( GafferImage.Shuffle.ChannelPlug( "channel2", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ShuffleLayer"]["channels"].addChild( GafferImage.Shuffle.ChannelPlug( "channel3", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["ShuffleLayer"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["in"] = GafferImage.ImagePlug( "in", flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["in"] )
__children["Expression3"] = Gaffer.Expression( "Expression3" )
parent.addChild( __children["Expression3"] )
__children["Expression3"]["__in"].addChild( Gaffer.StringPlug( "p0", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression3"]["__in"].addChild( Gaffer.StringPlug( "p1", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression3"]["__out"].addChild( Gaffer.StringPlug( "p0", direction = Gaffer.Plug.Direction.Out, defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression3"]["__out"].addChild( Gaffer.StringPlug( "p1", direction = Gaffer.Plug.Direction.Out, defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression3"]["__out"].addChild( Gaffer.StringPlug( "p2", direction = Gaffer.Plug.Direction.Out, defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression3"]["__out"].addChild( Gaffer.StringPlug( "p3", direction = Gaffer.Plug.Direction.Out, defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression3"]["__out"].addChild( Gaffer.StringPlug( "p4", direction = Gaffer.Plug.Direction.Out, defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression3"]["__out"].addChild( Gaffer.StringPlug( "p5", direction = Gaffer.Plug.Direction.Out, defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression3"]["__out"].addChild( Gaffer.StringPlug( "p6", direction = Gaffer.Plug.Direction.Out, defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression3"]["__out"].addChild( Gaffer.StringPlug( "p7", direction = Gaffer.Plug.Direction.Out, defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["Expression3"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxIn"] = Gaffer.BoxIn( "BoxIn" )
parent.addChild( __children["BoxIn"] )
__children["BoxIn"].setup( GafferImage.ImagePlug( "out", ) )
__children["BoxIn"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["BoxOut"] = Gaffer.BoxOut( "BoxOut" )
parent.addChild( __children["BoxOut"] )
__children["BoxOut"].setup( GafferImage.ImagePlug( "in", ) )
__children["BoxOut"].addChild( Gaffer.V2fPlug( "__uiPosition", defaultValue = imath.V2f( 0, 0 ), flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, ) )
__children["out"] = GafferImage.ImagePlug( "out", direction = Gaffer.Plug.Direction.Out, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["out"] )
__children["enabled"] = Gaffer.BoolPlug( "enabled", defaultValue = True, flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["enabled"] )
__children["inLayer"] = Gaffer.StringPlug( "inLayer", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["inLayer"] )
__children["outLayer"] = Gaffer.StringPlug( "outLayer", defaultValue = '', flags = Gaffer.Plug.Flags.Default | Gaffer.Plug.Flags.Dynamic, )
parent.addChild( __children["outLayer"] )
__children["ShuffleLayer"]["user"]["inLayer"].setInput( __children["inLayer"] )
Gaffer.Metadata.registerValue( __children["ShuffleLayer"]["user"]["inLayer"], 'nodule:type', '' )
__children["ShuffleLayer"]["user"]["outLayer"].setInput( __children["outLayer"] )
Gaffer.Metadata.registerValue( __children["ShuffleLayer"]["user"]["outLayer"], 'nodule:type', '' )
__children["ShuffleLayer"]["in"].setInput( __children["BoxIn"]["out"] )
__children["ShuffleLayer"]["channels"]["channel"]["out"].setInput( __children["Expression3"]["__out"]["p1"] )
__children["ShuffleLayer"]["channels"]["channel"]["in"].setInput( __children["Expression3"]["__out"]["p0"] )
__children["ShuffleLayer"]["channels"]["channel1"]["out"].setInput( __children["Expression3"]["__out"]["p3"] )
__children["ShuffleLayer"]["channels"]["channel1"]["in"].setInput( __children["Expression3"]["__out"]["p2"] )
__children["ShuffleLayer"]["channels"]["channel2"]["out"].setInput( __children["Expression3"]["__out"]["p5"] )
__children["ShuffleLayer"]["channels"]["channel2"]["in"].setInput( __children["Expression3"]["__out"]["p4"] )
__children["ShuffleLayer"]["channels"]["channel3"]["out"].setInput( __children["Expression3"]["__out"]["p7"] )
__children["ShuffleLayer"]["channels"]["channel3"]["in"].setInput( __children["Expression3"]["__out"]["p6"] )
__children["ShuffleLayer"]["__uiPosition"].setValue( imath.V2f( -435.811401, -36.8944016 ) )
Gaffer.Metadata.registerValue( __children["in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["in"], 'noduleLayout:spacing', 2.0 )
__children["Expression3"]["__in"]["p0"].setInput( __children["ShuffleLayer"]["user"]["inLayer"] )
__children["Expression3"]["__in"]["p1"].setInput( __children["ShuffleLayer"]["user"]["outLayer"] )
__children["Expression3"]["__uiPosition"].setValue( imath.V2f( -431.010468, -35.6086273 ) )
__children["BoxIn"]["__in"].setInput( __children["in"] )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'description', 'The input image' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'plugValueWidget:type', '' )
Gaffer.Metadata.registerValue( __children["BoxIn"]["__in"], 'noduleLayout:spacing', 2.0 )
__children["BoxIn"]["__uiPosition"].setValue( imath.V2f( -435.811401, -28.5623684 ) )
__children["BoxOut"]["in"].setInput( __children["ShuffleLayer"]["out"] )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["BoxOut"]["__out"], 'nodule:type', 'GafferUI::StandardNodule' )
__children["BoxOut"]["passThrough"].setInput( __children["BoxIn"]["out"] )
__children["BoxOut"]["enabled"].setInput( __children["enabled"] )
__children["BoxOut"]["__uiPosition"].setValue( imath.V2f( -434.310516, -45.2264328 ) )
__children["out"].setInput( __children["BoxOut"]["__out"] )
Gaffer.Metadata.registerValue( __children["out"], 'description', 'The output image generated by this node.' )
Gaffer.Metadata.registerValue( __children["out"], 'nodule:type', 'GafferUI::StandardNodule' )
Gaffer.Metadata.registerValue( __children["inLayer"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["inLayer"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["inLayer"], 'nodule:type', '' )
Gaffer.Metadata.registerValue( __children["inLayer"], 'description', '' )
Gaffer.Metadata.registerValue( __children["outLayer"], 'deletable', True )
Gaffer.Metadata.registerValue( __children["outLayer"], 'renameable', True )
Gaffer.Metadata.registerValue( __children["outLayer"], 'nodule:type', '' )
__children["Expression3"]["__engine"].setValue( 'python' )
__children["Expression3"]["__expression"].setValue( 'def conform(l):\n\tif l == "RGBA" or l == "RGB" or l == "":\n\t\tl = ("R", "G", "B", "A")\n\telif l == "White":\n\t\tl = ("__white", "__white", "__white", "__white")\n\telif l == "Black":\n\t\tl = ("__black", "__black", "__black", "__black")\n\telse:\n\t\tl = (l+".R", l+".G", l+".B", l+".A")\n\treturn l\n\ninLayer = conform(parent["__in"]["p0"])\n\nparent["__out"]["p0"]  = inLayer[0]\nparent["__out"]["p2"] = inLayer[1]\nparent["__out"]["p4"] = inLayer[2]\nparent["__out"]["p6"] = inLayer[3]\n\noutLayer = conform(parent["__in"]["p1"])\nparent["__out"]["p1"]  = outLayer[0]\nparent["__out"]["p3"] = outLayer[1]\nparent["__out"]["p5"] = outLayer[2]\nparent["__out"]["p7"] = outLayer[3]\n\n' )
Gaffer.Metadata.registerValue( parent, 'description', 'Shuffle RGBA into specified layer name.' )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonTop:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonBottom:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonLeft:visible', False )
Gaffer.Metadata.registerValue( parent, 'noduleLayout:customGadget:addButtonRight:visible', False )


del __children

